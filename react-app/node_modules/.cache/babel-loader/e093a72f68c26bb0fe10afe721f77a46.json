{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst error_1 = require(\"./error\");\n\nconst TRANSACTION_NOT_FOUND = 10;\n\nclass ArangoTransaction {\n  constructor(connection, id) {\n    this.isArangoTransaction = true;\n    this._connection = connection;\n    this.id = id;\n  }\n\n  exists() {\n    return this.get().then(() => true, err => {\n      if (error_1.isArangoError(err) && err.errorNum === TRANSACTION_NOT_FOUND) {\n        return false;\n      }\n\n      throw err;\n    });\n  }\n\n  get() {\n    return this._connection.request({\n      path: `/_api/transaction/${this.id}`\n    }, res => res.body.result);\n  }\n\n  commit() {\n    return this._connection.request({\n      method: \"PUT\",\n      path: `/_api/transaction/${this.id}`\n    }, res => res.body.result);\n  }\n\n  abort() {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/transaction/${this.id}`\n    }, res => res.body.result);\n  }\n\n  run(fn) {\n    this._connection.setTransactionId(this.id);\n\n    try {\n      return Promise.resolve(fn());\n    } finally {\n      this._connection.clearTransactionId();\n    }\n  }\n\n}\n\nexports.ArangoTransaction = ArangoTransaction;","map":{"version":3,"sources":["../../src/transaction.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAOA,MAAM,qBAAqB,GAAG,EAA9B;;AACA,MAAa,iBAAb,CAA8B;AAK5B,EAAA,WAAA,CAAY,UAAZ,EAAoC,EAApC,EAA8C;AAJ9C,SAAA,mBAAA,GAA4B,IAA5B;AAKE,SAAK,WAAL,GAAmB,UAAnB;AACA,SAAK,EAAL,GAAU,EAAV;AACD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,KAAK,GAAL,GAAW,IAAX,CACL,MAAM,IADD,EAEL,GAAG,IAAG;AACJ,UAAI,OAAA,CAAA,aAAA,CAAc,GAAd,KAAsB,GAAG,CAAC,QAAJ,KAAiB,qBAA3C,EAAkE;AAChE,eAAO,KAAP;AACD;;AACD,YAAM,GAAN;AACD,KAPI,CAAP;AASD;;AAED,EAAA,GAAG,GAAA;AACD,WAAO,KAAK,WAAL,CAAiB,OAAjB,CACL;AACE,MAAA,IAAI,EAAE,qBAAqB,KAAK,EAAE;AADpC,KADK,EAIL,GAAG,IAAI,GAAG,CAAC,IAAJ,CAAS,MAJX,CAAP;AAMD;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,KAAK,WAAL,CAAiB,OAAjB,CACL;AACE,MAAA,MAAM,EAAE,KADV;AAEE,MAAA,IAAI,EAAE,qBAAqB,KAAK,EAAE;AAFpC,KADK,EAKL,GAAG,IAAI,GAAG,CAAC,IAAJ,CAAS,MALX,CAAP;AAOD;;AAED,EAAA,KAAK,GAAA;AACH,WAAO,KAAK,WAAL,CAAiB,OAAjB,CACL;AACE,MAAA,MAAM,EAAE,QADV;AAEE,MAAA,IAAI,EAAE,qBAAqB,KAAK,EAAE;AAFpC,KADK,EAKL,GAAG,IAAI,GAAG,CAAC,IAAJ,CAAS,MALX,CAAP;AAOD;;AAED,EAAA,GAAG,CAAI,EAAJ,EAAwB;AACzB,SAAK,WAAL,CAAiB,gBAAjB,CAAkC,KAAK,EAAvC;;AACA,QAAI;AACF,aAAO,OAAO,CAAC,OAAR,CAAgB,EAAE,EAAlB,CAAP;AACD,KAFD,SAEU;AACR,WAAK,WAAL,CAAiB,kBAAjB;AACD;AACF;;AA1D2B;;AAA9B,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourcesContent":["import { Connection } from \"./connection\";\nimport { isArangoError } from \"./error\";\n\ninterface TransactionStatus {\n  id: string;\n  status: \"running\" | \"committed\" | \"aborted\";\n}\n\nconst TRANSACTION_NOT_FOUND = 10;\nexport class ArangoTransaction {\n  isArangoTransaction: true = true;\n  private _connection: Connection;\n  id: string;\n\n  constructor(connection: Connection, id: string) {\n    this._connection = connection;\n    this.id = id;\n  }\n\n  exists(): Promise<boolean> {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === TRANSACTION_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  get(): Promise<TransactionStatus> {\n    return this._connection.request(\n      {\n        path: `/_api/transaction/${this.id}`\n      },\n      res => res.body.result\n    );\n  }\n\n  commit(): Promise<TransactionStatus> {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/transaction/${this.id}`\n      },\n      res => res.body.result\n    );\n  }\n\n  abort(): Promise<TransactionStatus> {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/transaction/${this.id}`\n      },\n      res => res.body.result\n    );\n  }\n\n  run<T>(fn: () => Promise<T>): Promise<T> {\n    this._connection.setTransactionId(this.id);\n    try {\n      return Promise.resolve(fn());\n    } finally {\n      this._connection.clearTransactionId();\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}