{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass ArrayCursor {\n  constructor(connection, body, host, allowDirtyRead) {\n    this.extra = body.extra;\n    this._connection = connection;\n    this._result = body.result;\n    this._id = body.id;\n    this._hasMore = Boolean(body.id && body.hasMore);\n    this._host = host;\n    this.count = body.count;\n    this._allowDirtyRead = allowDirtyRead;\n  }\n\n  _drain() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._more();\n      if (!this._hasMore) return this;\n      return this._drain();\n    });\n  }\n\n  _more() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._hasMore) return;else {\n        const res = yield this._connection.request({\n          method: \"PUT\",\n          path: `/_api/cursor/${this._id}`,\n          host: this._host,\n          allowDirtyRead: this._allowDirtyRead\n        });\n\n        this._result.push(...res.body.result);\n\n        this._hasMore = res.body.hasMore;\n      }\n    });\n  }\n\n  all() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield this._drain();\n      let result = this._result;\n      this._result = [];\n      return result;\n    });\n  }\n\n  next() {\n    return __awaiter(this, void 0, void 0, function* () {\n      while (!this._result.length && this._hasMore) {\n        yield this._more();\n      }\n\n      if (!this._result.length) {\n        return undefined;\n      }\n\n      return this._result.shift();\n    });\n  }\n\n  hasNext() {\n    return Boolean(this._hasMore || this._result.length);\n  }\n\n  nextBatch() {\n    return __awaiter(this, void 0, void 0, function* () {\n      while (!this._result.length && this._hasMore) {\n        yield this._more();\n      }\n\n      if (!this._result.length) {\n        return undefined;\n      }\n\n      return this._result.splice(0, this._result.length);\n    });\n  }\n\n  each(fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let index = 0;\n\n      while (this._result.length || this._hasMore) {\n        let result;\n\n        while (this._result.length) {\n          result = fn(this._result.shift(), index, this);\n          index++;\n          if (result === false) return result;\n        }\n\n        if (this._hasMore) yield this._more();\n      }\n\n      return true;\n    });\n  }\n\n  every(fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let index = 0;\n\n      while (this._result.length || this._hasMore) {\n        let result;\n\n        while (this._result.length) {\n          result = fn(this._result.shift(), index, this);\n          index++;\n          if (!result) return false;\n        }\n\n        if (this._hasMore) yield this._more();\n      }\n\n      return true;\n    });\n  }\n\n  some(fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let index = 0;\n\n      while (this._result.length || this._hasMore) {\n        let result;\n\n        while (this._result.length) {\n          result = fn(this._result.shift(), index, this);\n          index++;\n          if (result) return true;\n        }\n\n        if (this._hasMore) yield this._more();\n      }\n\n      return false;\n    });\n  }\n\n  map(fn) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let index = 0;\n      let result = [];\n\n      while (this._result.length || this._hasMore) {\n        while (this._result.length) {\n          result.push(fn(this._result.shift(), index, this));\n          index++;\n        }\n\n        if (this._hasMore) yield this._more();\n      }\n\n      return result;\n    });\n  }\n\n  reduce(fn, accu) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let index = 0;\n\n      if (accu === undefined) {\n        if (!this._result.length && !this._hasMore) {\n          yield this._more();\n        }\n\n        accu = this._result.shift();\n        index += 1;\n      }\n\n      while (this._result.length || this._hasMore) {\n        while (this._result.length) {\n          accu = fn(accu, this._result.shift(), index, this);\n          index++;\n        }\n\n        if (this._hasMore) yield this._more();\n      }\n\n      return accu;\n    });\n  }\n\n  kill() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._hasMore) return undefined;\n      return this._connection.request({\n        method: \"DELETE\",\n        path: `/_api/cursor/${this._id}`\n      }, () => {\n        this._hasMore = false;\n        return undefined;\n      });\n    });\n  }\n\n}\n\nexports.ArrayCursor = ArrayCursor;","map":{"version":3,"sources":["../../src/cursor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection } from \"./connection\";\n\nexport class ArrayCursor {\n  extra: any;\n  count: number;\n\n  private _connection: Connection;\n  private _result: any;\n  private _hasMore: boolean;\n  private _id: string | undefined;\n  private _host?: number;\n  private _allowDirtyRead?: boolean;\n\n  constructor(\n    connection: Connection,\n    body: any,\n    host?: number,\n    allowDirtyRead?: boolean\n  ) {\n    this.extra = body.extra;\n    this._connection = connection;\n    this._result = body.result;\n    this._id = body.id;\n    this._hasMore = Boolean(body.id && body.hasMore);\n    this._host = host;\n    this.count = body.count;\n    this._allowDirtyRead = allowDirtyRead;\n  }\n\n  private async _drain(): Promise<ArrayCursor> {\n    await this._more();\n    if (!this._hasMore) return this;\n    return this._drain();\n  }\n\n  private async _more() {\n    if (!this._hasMore) return;\n    else {\n      const res = await this._connection.request({\n        method: \"PUT\",\n        path: `/_api/cursor/${this._id}`,\n        host: this._host,\n        allowDirtyRead: this._allowDirtyRead\n      });\n      this._result.push(...res.body.result);\n      this._hasMore = res.body.hasMore;\n    }\n  }\n\n  async all() {\n    await this._drain();\n    let result = this._result;\n    this._result = [];\n    return result;\n  }\n\n  async next(): Promise<any | undefined> {\n    while (!this._result.length && this._hasMore) {\n      await this._more();\n    }\n    if (!this._result.length) {\n      return undefined;\n    }\n    return this._result.shift();\n  }\n\n  hasNext(): boolean {\n    return Boolean(this._hasMore || this._result.length);\n  }\n\n  async nextBatch(): Promise<any[] | undefined> {\n    while (!this._result.length && this._hasMore) {\n      await this._more();\n    }\n    if (!this._result.length) {\n      return undefined;\n    }\n    return this._result.splice(0, this._result.length);\n  }\n\n  async each(\n    fn: (value: any, index: number, self: ArrayCursor) => boolean | void\n  ): Promise<boolean> {\n    let index = 0;\n    while (this._result.length || this._hasMore) {\n      let result;\n      while (this._result.length) {\n        result = fn(this._result.shift(), index, this);\n        index++;\n        if (result === false) return result;\n      }\n      if (this._hasMore) await this._more();\n    }\n    return true;\n  }\n\n  async every(\n    fn: (value: any, index: number, self: ArrayCursor) => boolean\n  ): Promise<boolean> {\n    let index = 0;\n    while (this._result.length || this._hasMore) {\n      let result;\n      while (this._result.length) {\n        result = fn(this._result.shift(), index, this);\n        index++;\n        if (!result) return false;\n      }\n      if (this._hasMore) await this._more();\n    }\n    return true;\n  }\n\n  async some(\n    fn: (value: any, index: number, self: ArrayCursor) => boolean\n  ): Promise<boolean> {\n    let index = 0;\n    while (this._result.length || this._hasMore) {\n      let result;\n      while (this._result.length) {\n        result = fn(this._result.shift(), index, this);\n        index++;\n        if (result) return true;\n      }\n      if (this._hasMore) await this._more();\n    }\n    return false;\n  }\n\n  async map<T>(\n    fn: (value: any, index: number, self: ArrayCursor) => T\n  ): Promise<T[]> {\n    let index = 0;\n    let result: any[] = [];\n    while (this._result.length || this._hasMore) {\n      while (this._result.length) {\n        result.push(fn(this._result.shift(), index, this));\n        index++;\n      }\n      if (this._hasMore) await this._more();\n    }\n    return result;\n  }\n\n  async reduce<T>(\n    fn: (accu: T, value: any, index: number, self: ArrayCursor) => T,\n    accu?: T\n  ): Promise<T | undefined> {\n    let index = 0;\n    if (accu === undefined) {\n      if (!this._result.length && !this._hasMore) {\n        await this._more();\n      }\n      accu = this._result.shift();\n      index += 1;\n    }\n    while (this._result.length || this._hasMore) {\n      while (this._result.length) {\n        accu = fn(accu!, this._result.shift(), index, this);\n        index++;\n      }\n      if (this._hasMore) await this._more();\n    }\n    return accu;\n  }\n\n  async kill(): Promise<void> {\n    if (!this._hasMore) return undefined;\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/cursor/${this._id}`\n      },\n      () => {\n        this._hasMore = false;\n        return undefined;\n      }\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}