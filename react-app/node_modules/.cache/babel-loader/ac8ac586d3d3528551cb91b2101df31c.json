{"ast":null,"code":"var _jsxFileName = \"/home/diego/Documents/school/new_test/react-api/src/APIs/graph/components/getAllUsers.js\";\nimport * as React from 'react';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport arangojs, { aql } from \"arangojs\";\nimport { graphql, GraphQLInt, GraphQLNonNull, GraphQLObjectType, GraphQLSchema, GraphQLString } from \"graphql\";\nimport Button from \"@material-ui/core/Button\";\nconst db = arangojs({\n  url: `http://127.0.0.1:8529`,\n  databaseName: 'nodeArangoWebAppDB'\n});\n\nasync function getUsers() {\n  const collection = db.collection('User');\n  await collection.load(false);\n  let query = aql`\n      FOR user IN User\n      RETURN user\n    `;\n  let results = await db.query(query);\n  return results.next();\n}\n\nasync function addUser() {\n  const collection = db.edgeCollection('User');\n  await collection.load({\n    waitForSync: true // always sync document changes to disk\n\n  });\n  let query = aql`\n      FOR user IN User\n      RETURN user\n    `;\n  let results = await db.query(query);\n  return results.next();\n}\n\nlet User = new GraphQLObjectType({\n  name: 'User',\n  fields: () => ({\n    key: {\n      type: GraphQLInt\n    },\n    username: {\n      type: GraphQLString\n    },\n    email: {\n      type: GraphQLString\n    }\n  })\n});\nlet schema = new GraphQLSchema({\n  query: new GraphQLObjectType({\n    name: 'Query',\n    fields: () => ({\n      user: {\n        type: User,\n        resolve: (root, args) => {\n          return getUsers();\n        }\n      }\n    })\n  }),\n  mutation: new GraphQLObjectType({\n    name: 'Mutation',\n    fields: () => ({\n      user: {\n        type: User,\n        args: {\n          username: {\n            type: GraphQLNonNull(GraphQLString)\n          },\n          email: {\n            type: GraphQLNonNull(GraphQLString)\n          }\n        },\n        resolve: (root, args) => {\n          return addUser();\n        }\n      }\n    })\n  })\n});\n\nlet query = () => `\n        query {\n          user {\n            key\n            username\n            email\n          }\n        }\n      `;\n\nlet mutation = () => `\n        mutation {\n          user {\n            key\n            username\n            email\n          }\n        }\n      `;\n\nexport const styles = theme => ({\n  button: {\n    fontSize: 'smaller',\n    borderColor: '#fff',\n    color: '#fff',\n    background: '#550055',\n    height: 60,\n    justifyContent: 'center',\n    '&:hover': {\n      background: '#310131'\n    }\n  }\n});\n\nclass GetAllUsers extends React.Component {\n  componentDidMount() {}\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      className: classes.button,\n      onClick: this.onInputClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.addUser,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }\n    }, \"test\"));\n  }\n\n  async onInputClick() {\n    let result = await graphql(schema, query());\n    console.log(result);\n  }\n\n  async addUser() {}\n\n}\n\nexport default withStyles(styles)(GetAllUsers);","map":{"version":3,"sources":["/home/diego/Documents/school/new_test/react-api/src/APIs/graph/components/getAllUsers.js"],"names":["React","withStyles","arangojs","aql","graphql","GraphQLInt","GraphQLNonNull","GraphQLObjectType","GraphQLSchema","GraphQLString","Button","db","url","databaseName","getUsers","collection","load","query","results","next","addUser","edgeCollection","waitForSync","User","name","fields","key","type","username","email","schema","user","resolve","root","args","mutation","styles","theme","button","fontSize","borderColor","color","background","height","justifyContent","GetAllUsers","Component","componentDidMount","render","classes","props","onInputClick","result","console","log"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,QAAP,IAAkBC,GAAlB,QAA4B,UAA5B;AACA,SAAQC,OAAR,EAAiBC,UAAjB,EAA6BC,cAA7B,EAA6CC,iBAA7C,EAAgEC,aAAhE,EAA+EC,aAA/E,QAAmG,SAAnG;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,MAAMC,EAAE,GAAGT,QAAQ,CAAC;AAChBU,EAAAA,GAAG,EAAG,uBADU;AAEhBC,EAAAA,YAAY,EAAE;AAFE,CAAD,CAAnB;;AAKA,eAAeC,QAAf,GAA0B;AACtB,QAAMC,UAAU,GAAGJ,EAAE,CAACI,UAAH,CAAc,MAAd,CAAnB;AACA,QAAMA,UAAU,CAACC,IAAX,CAAgB,KAAhB,CAAN;AAEA,MAAIC,KAAK,GAAGd,GAAI;;;KAAhB;AAIA,MAAIe,OAAO,GAAG,MAAMP,EAAE,CAACM,KAAH,CAASA,KAAT,CAApB;AACA,SAAOC,OAAO,CAACC,IAAR,EAAP;AACH;;AAED,eAAeC,OAAf,GAAyB;AACrB,QAAML,UAAU,GAAGJ,EAAE,CAACU,cAAH,CAAkB,MAAlB,CAAnB;AACA,QAAMN,UAAU,CAACC,IAAX,CAAgB;AAClBM,IAAAA,WAAW,EAAE,IADK,CACA;;AADA,GAAhB,CAAN;AAIA,MAAIL,KAAK,GAAGd,GAAI;;;KAAhB;AAIA,MAAIe,OAAO,GAAG,MAAMP,EAAE,CAACM,KAAH,CAASA,KAAT,CAApB;AACA,SAAOC,OAAO,CAACC,IAAR,EAAP;AACH;;AAGD,IAAII,IAAI,GAAG,IAAIhB,iBAAJ,CAAsB;AAC7BiB,EAAAA,IAAI,EAAE,MADuB;AAE7BC,EAAAA,MAAM,EAAE,OAAO;AACXC,IAAAA,GAAG,EAAE;AACDC,MAAAA,IAAI,EAAEtB;AADL,KADM;AAIXuB,IAAAA,QAAQ,EAAE;AACND,MAAAA,IAAI,EAAElB;AADA,KAJC;AAOXoB,IAAAA,KAAK,EAAE;AACHF,MAAAA,IAAI,EAAElB;AADH;AAPI,GAAP;AAFqB,CAAtB,CAAX;AAeA,IAAIqB,MAAM,GAAG,IAAItB,aAAJ,CAAkB;AAC3BS,EAAAA,KAAK,EAAE,IAAIV,iBAAJ,CAAsB;AACzBiB,IAAAA,IAAI,EAAE,OADmB;AAEzBC,IAAAA,MAAM,EAAE,OAAO;AACXM,MAAAA,IAAI,EAAE;AACFJ,QAAAA,IAAI,EAAEJ,IADJ;AAEFS,QAAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrB,iBAAOpB,QAAQ,EAAf;AACH;AAJC;AADK,KAAP;AAFiB,GAAtB,CADoB;AAa3BqB,EAAAA,QAAQ,EAAE,IAAI5B,iBAAJ,CAAsB;AAC5BiB,IAAAA,IAAI,EAAE,UADsB;AAE5BC,IAAAA,MAAM,EAAE,OAAO;AACXM,MAAAA,IAAI,EAAE;AACFJ,QAAAA,IAAI,EAAEJ,IADJ;AAEFW,QAAAA,IAAI,EAAE;AACFN,UAAAA,QAAQ,EAAE;AACND,YAAAA,IAAI,EAAErB,cAAc,CAACG,aAAD;AADd,WADR;AAIFoB,UAAAA,KAAK,EAAE;AACHF,YAAAA,IAAI,EAAErB,cAAc,CAACG,aAAD;AADjB;AAJL,SAFJ;AAUFuB,QAAAA,OAAO,EAAE,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACrB,iBAAOd,OAAO,EAAd;AACH;AAZC;AADK,KAAP;AAFoB,GAAtB;AAbiB,CAAlB,CAAb;;AAkCA,IAAIH,KAAK,GAAG,MAAO;;;;;;;;OAAnB;;AAUA,IAAIkB,QAAQ,GAAG,MAAO;;;;;;;;OAAtB;;AAUA,OAAO,MAAMC,MAAM,GAAGC,KAAK,KAAK;AAC5BC,EAAAA,MAAM,EAAE;AACJC,IAAAA,QAAQ,EAAE,SADN;AAEJC,IAAAA,WAAW,EAAE,MAFT;AAGJC,IAAAA,KAAK,EAAE,MAHH;AAIJC,IAAAA,UAAU,EAAE,SAJR;AAKJC,IAAAA,MAAM,EAAE,EALJ;AAMJC,IAAAA,cAAc,EAAE,QANZ;AAOJ,eAAW;AACPF,MAAAA,UAAU,EAAE;AADL;AAPP;AADoB,CAAL,CAApB;;AAcP,MAAMG,WAAN,SAA0B7C,KAAK,CAAC8C,SAAhC,CAA0C;AACtCC,EAAAA,iBAAiB,GAAG,CAEnB;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA;AAAD,QAAY,KAAKC,KAAvB;AAEA,wBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,MAAD;AAAQ,MAAA,SAAS,EAAED,OAAO,CAACX,MAA3B;AAAmC,MAAA,OAAO,EAAE,KAAKa,YAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,KAAK/B,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,CADJ;AAMH;;AAED,QAAM+B,YAAN,GAAqB;AACjB,QAAIC,MAAM,GAAG,MAAMhD,OAAO,CAAC0B,MAAD,EAASb,KAAK,EAAd,CAA1B;AACAoC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACH;;AAED,QAAMhC,OAAN,GAAe,CAEd;;AAvBqC;;AA0B1C,eAAgBnB,UAAU,CAACmC,MAAD,CAAX,CAAqBS,WAArB,CAAf","sourcesContent":["import * as React from 'react';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport arangojs, {aql} from \"arangojs\";\nimport {graphql, GraphQLInt, GraphQLNonNull, GraphQLObjectType, GraphQLSchema, GraphQLString} from \"graphql\";\nimport Button from \"@material-ui/core/Button\";\n\nconst db = arangojs({\n    url: `http://127.0.0.1:8529`,\n    databaseName: 'nodeArangoWebAppDB'\n})\n\nasync function getUsers() {\n    const collection = db.collection('User');\n    await collection.load(false)\n\n    let query = aql`\n      FOR user IN User\n      RETURN user\n    `\n    let results = await db.query(query)\n    return results.next()\n}\n\nasync function addUser() {\n    const collection = db.edgeCollection('User');\n    await collection.load({\n        waitForSync: true // always sync document changes to disk\n    });\n\n    let query = aql`\n      FOR user IN User\n      RETURN user\n    `\n    let results = await db.query(query)\n    return results.next()\n}\n\n\nlet User = new GraphQLObjectType({\n    name: 'User',\n    fields: () => ({\n        key: {\n            type: GraphQLInt\n        },\n        username: {\n            type: GraphQLString\n        },\n        email: {\n            type: GraphQLString\n        }\n    })\n})\n\nlet schema = new GraphQLSchema({\n    query: new GraphQLObjectType({\n        name: 'Query',\n        fields: () => ({\n            user: {\n                type: User,\n                resolve: (root, args) => {\n                    return getUsers()\n                },\n            }\n        })\n    }),\n\n    mutation: new GraphQLObjectType({\n        name: 'Mutation',\n        fields: () => ({\n            user: {\n                type: User,\n                args: {\n                    username: {\n                        type: GraphQLNonNull(GraphQLString)\n                    },\n                    email: {\n                        type: GraphQLNonNull(GraphQLString)\n                    },\n                },\n                resolve: (root, args) => {\n                    return addUser()\n                },\n            }\n        })\n    })\n})\n\nlet query = () => `\n        query {\n          user {\n            key\n            username\n            email\n          }\n        }\n      `\n\nlet mutation = () => `\n        mutation {\n          user {\n            key\n            username\n            email\n          }\n        }\n      `\n\nexport const styles = theme => ({\n    button: {\n        fontSize: 'smaller',\n        borderColor: '#fff',\n        color: '#fff',\n        background: '#550055',\n        height: 60,\n        justifyContent: 'center',\n        '&:hover': {\n            background: '#310131',\n        },\n    },\n});\n\nclass GetAllUsers extends React.Component {\n    componentDidMount() {\n\n    }\n\n    render() {\n        const {classes} = this.props\n\n        return (\n            <React.Fragment>\n                <Button className={classes.button} onClick={this.onInputClick}/>\n                <Button onClick={this.addUser}>test</Button>\n            </React.Fragment>\n        );\n    }\n\n    async onInputClick() {\n        let result = await graphql(schema, query())\n        console.log(result)\n    }\n\n    async addUser(){\n\n    }\n}\n\nexport default (withStyles(styles))(GetAllUsers);"]},"metadata":{},"sourceType":"module"}