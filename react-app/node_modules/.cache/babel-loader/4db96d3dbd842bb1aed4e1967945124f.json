{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst analyzer_1 = require(\"./analyzer\");\n\nconst aql_query_1 = require(\"./aql-query\");\n\nconst collection_1 = require(\"./collection\");\n\nconst connection_1 = require(\"./connection\");\n\nconst cursor_1 = require(\"./cursor\");\n\nconst error_1 = require(\"./error\");\n\nconst graph_1 = require(\"./graph\");\n\nconst route_1 = require(\"./route\");\n\nconst transaction_1 = require(\"./transaction\");\n\nconst btoa_1 = require(\"./util/btoa\");\n\nconst multipart_1 = require(\"./util/multipart\");\n\nconst view_1 = require(\"./view\");\n\nfunction colToString(collection) {\n  if (collection_1.isArangoCollection(collection)) {\n    return String(collection.name);\n  } else return String(collection);\n}\n\nconst DATABASE_NOT_FOUND = 1228;\n\nclass Database {\n  constructor(config) {\n    this._connection = new connection_1.Connection(config);\n  }\n\n  get name() {\n    return this._connection.getDatabaseName() || null;\n  } //#region misc\n\n\n  version() {\n    return this._connection.request({\n      method: \"GET\",\n      path: \"/_api/version\"\n    }, res => res.body);\n  }\n\n  route(path, headers) {\n    return new route_1.Route(this._connection, path, headers);\n  }\n\n  acquireHostList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this._connection.getDatabaseName()) {\n        throw new Error(\"Cannot acquire host list with absolute URL\");\n      }\n\n      const urls = yield this._connection.request({\n        path: \"/_api/cluster/endpoints\"\n      }, res => res.body.endpoints.map(endpoint => endpoint.endpoint));\n\n      this._connection.addToHostList(urls);\n    });\n  }\n\n  close() {\n    this._connection.close();\n  } //#endregion\n  //#region auth\n\n\n  login(username = \"root\", password = \"\") {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_open/auth\",\n      body: {\n        username,\n        password\n      }\n    }, res => {\n      this.useBearerAuth(res.body.jwt);\n      return res.body.jwt;\n    });\n  }\n\n  useBearerAuth(token) {\n    this._connection.setHeader(\"authorization\", `Bearer ${token}`);\n\n    return this;\n  }\n\n  useBasicAuth(username = \"root\", password = \"\") {\n    this._connection.setHeader(\"authorization\", `Basic ${btoa_1.btoa(`${username}:${password}`)}`);\n\n    return this;\n  } //#endregion\n  //#region databases\n\n\n  useDatabase(databaseName) {\n    this._connection.setDatabaseName(databaseName);\n\n    return this;\n  }\n\n  get() {\n    return this._connection.request({\n      path: \"/_api/database/current\"\n    }, res => res.body.result);\n  }\n\n  exists() {\n    return this.get().then(() => true, err => {\n      if (error_1.isArangoError(err) && err.errorNum === DATABASE_NOT_FOUND) {\n        return false;\n      }\n\n      throw err;\n    });\n  }\n\n  createDatabase(databaseName, users) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/database\",\n      body: {\n        users,\n        name: databaseName\n      }\n    }, res => res.body);\n  }\n\n  listDatabases() {\n    return this._connection.request({\n      path: \"/_api/database\"\n    }, res => res.body.result);\n  }\n\n  listUserDatabases() {\n    return this._connection.request({\n      path: \"/_api/database/user\"\n    }, res => res.body.result);\n  }\n\n  dropDatabase(databaseName) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/database/${databaseName}`\n    }, res => res.body);\n  } //#endregion\n  //#region collections\n\n\n  collection(collectionName) {\n    return new collection_1.DocumentCollection(this._connection, collectionName);\n  }\n\n  edgeCollection(collectionName) {\n    return new collection_1.EdgeCollection(this._connection, collectionName);\n  }\n\n  listCollections(excludeSystem = true) {\n    return this._connection.request({\n      path: \"/_api/collection\",\n      qs: {\n        excludeSystem\n      }\n    }, res => this._connection.arangoMajor <= 2 ? res.body.collections : res.body.result);\n  }\n\n  collections(excludeSystem = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const collections = yield this.listCollections(excludeSystem);\n      return collections.map(data => collection_1.constructCollection(this._connection, data));\n    });\n  }\n\n  truncate(excludeSystem = true) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const collections = yield this.listCollections(excludeSystem);\n      return yield Promise.all(collections.map(data => this._connection.request({\n        method: \"PUT\",\n        path: `/_api/collection/${data.name}/truncate`\n      }, res => res.body)));\n    });\n  } //#endregion\n  //#region views\n\n\n  arangoSearchView(viewName) {\n    return new view_1.ArangoSearchView(this._connection, viewName);\n  }\n\n  listViews() {\n    return this._connection.request({\n      path: \"/_api/view\"\n    }, res => res.body.result);\n  }\n\n  views() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const views = yield this.listViews();\n      return views.map(data => view_1.constructView(this._connection, data));\n    });\n  } //#endregion\n  //#region analyzers\n\n\n  analyzer(name) {\n    return new analyzer_1.ArangoAnalyzer(this._connection, name);\n  }\n\n  listAnalyzers() {\n    return this._connection.request({\n      path: \"/_api/analyzer\"\n    }, res => res.body.result);\n  }\n\n  analyzers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const analyzers = yield this.listAnalyzers();\n      return analyzers.map(data => this.analyzer(data.name));\n    });\n  } //#endregion\n  //#region transactions\n\n\n  executeTransaction(collections, action, options) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/transaction\",\n      body: Object.assign({\n        collections: coerceTransactionCollections(collections),\n        action\n      }, options)\n    }, res => res.body.result);\n  }\n\n  transaction(collectionsOrId, action, params, options) {\n    if (arguments.length === 1 && typeof collectionsOrId === \"string\") {\n      return new transaction_1.ArangoTransaction(this._connection, collectionsOrId);\n    }\n\n    if (typeof params === \"number\") {\n      options = params;\n      params = undefined;\n    }\n\n    if (typeof options === \"number\") {\n      options = {\n        lockTimeout: options\n      };\n    }\n\n    return this.executeTransaction(collectionsOrId, action, Object.assign({\n      params\n    }, options));\n  }\n\n  beginTransaction(collections, options) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/transaction/begin\",\n      body: Object.assign({\n        collections: coerceTransactionCollections(collections)\n      }, options)\n    }, res => new transaction_1.ArangoTransaction(this._connection, res.body.result.id));\n  }\n\n  listTransactions() {\n    return this._connection.request({\n      path: \"/_api/transaction\"\n    }, res => res.body.transactions);\n  }\n\n  transactions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const transactions = yield this.listTransactions();\n      return transactions.map(data => this.transaction(data.id));\n    });\n  } //#endregion\n  //#region graphs\n\n\n  graph(graphName) {\n    return new graph_1.Graph(this._connection, graphName);\n  }\n\n  listGraphs() {\n    return this._connection.request({\n      path: \"/_api/gharial\"\n    }, res => res.body.graphs);\n  }\n\n  graphs() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const graphs = yield this.listGraphs();\n      return graphs.map(data => this.graph(data._key));\n    });\n  }\n\n  query(query, bindVars, opts) {\n    if (aql_query_1.isAqlQuery(query)) {\n      opts = bindVars;\n      bindVars = query.bindVars;\n      query = query.query;\n    } else if (aql_query_1.isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n\n    const _a = opts || {},\n          {\n      allowDirtyRead = undefined,\n      timeout = undefined\n    } = _a,\n          extra = __rest(_a, [\"allowDirtyRead\", \"timeout\"]);\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/cursor\",\n      body: Object.assign({}, extra, {\n        query,\n        bindVars\n      }),\n      allowDirtyRead,\n      timeout\n    }, res => new cursor_1.ArrayCursor(this._connection, res.body, res.arangojsHostId, allowDirtyRead));\n  }\n\n  explain(query, bindVars, opts) {\n    if (aql_query_1.isAqlQuery(query)) {\n      opts = bindVars;\n      bindVars = query.bindVars;\n      query = query.query;\n    } else if (aql_query_1.isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/explain\",\n      body: {\n        options: opts,\n        query,\n        bindVars\n      }\n    }, res => res.body);\n  }\n\n  parse(query) {\n    if (aql_query_1.isAqlQuery(query)) {\n      query = query.query;\n    } else if (aql_query_1.isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/query\",\n      body: {\n        query\n      }\n    }, res => res.body);\n  }\n\n  queryTracking() {\n    return this._connection.request({\n      method: \"GET\",\n      path: \"/_api/query/properties\"\n    }, res => res.body);\n  }\n\n  setQueryTracking(opts) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/query/properties\",\n      body: opts\n    }, res => res.body);\n  }\n\n  listRunningQueries() {\n    return this._connection.request({\n      method: \"GET\",\n      path: \"/_api/query/current\"\n    }, res => res.body);\n  }\n\n  listSlowQueries() {\n    return this._connection.request({\n      method: \"GET\",\n      path: \"/_api/query/slow\"\n    }, res => res.body);\n  }\n\n  clearSlowQueries() {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: \"/_api/query/slow\"\n    }, () => undefined);\n  }\n\n  killQuery(queryId) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/query/${queryId}`\n    }, () => undefined);\n  } //#endregion\n  //#region functions\n\n\n  listFunctions() {\n    return this._connection.request({\n      path: \"/_api/aqlfunction\"\n    }, res => res.body);\n  }\n\n  createFunction(name, code) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/aqlfunction\",\n      body: {\n        name,\n        code\n      }\n    }, res => res.body);\n  }\n\n  dropFunction(name, group = false) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/aqlfunction/${name}`,\n      body: {\n        group\n      }\n    }, res => res.body);\n  } //#endregion\n  //#region services\n\n\n  listServices() {\n    return this._connection.request({\n      path: \"/_api/foxx\"\n    }, res => res.body);\n  }\n\n  installService(mount, source, opts = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        configuration,\n        dependencies\n      } = opts,\n            qs = __rest(opts, [\"configuration\", \"dependencies\"]);\n\n      const req = yield multipart_1.toForm({\n        configuration,\n        dependencies,\n        source\n      });\n      return yield this._connection.request(Object.assign({}, req, {\n        method: \"POST\",\n        path: \"/_api/foxx\",\n        isBinary: true,\n        qs: Object.assign({}, qs, {\n          mount\n        })\n      }), res => res.body);\n    });\n  }\n\n  upgradeService(mount, source, opts = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        configuration,\n        dependencies\n      } = opts,\n            qs = __rest(opts, [\"configuration\", \"dependencies\"]);\n\n      const req = yield multipart_1.toForm({\n        configuration,\n        dependencies,\n        source\n      });\n      return yield this._connection.request(Object.assign({}, req, {\n        method: \"PATCH\",\n        path: \"/_api/foxx/service\",\n        isBinary: true,\n        qs: Object.assign({}, qs, {\n          mount\n        })\n      }), res => res.body);\n    });\n  }\n\n  replaceService(mount, source, opts = {}) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        configuration,\n        dependencies\n      } = opts,\n            qs = __rest(opts, [\"configuration\", \"dependencies\"]);\n\n      const req = yield multipart_1.toForm({\n        configuration,\n        dependencies,\n        source\n      });\n      return yield this._connection.request(Object.assign({}, req, {\n        method: \"PUT\",\n        path: \"/_api/foxx/service\",\n        isBinary: true,\n        qs: Object.assign({}, qs, {\n          mount\n        })\n      }), res => res.body);\n    });\n  }\n\n  uninstallService(mount, opts = {}) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: \"/_api/foxx/service\",\n      qs: Object.assign({}, opts, {\n        mount\n      })\n    }, () => undefined);\n  }\n\n  getService(mount) {\n    return this._connection.request({\n      path: \"/_api/foxx/service\",\n      qs: {\n        mount\n      }\n    }, res => res.body);\n  }\n\n  getServiceConfiguration(mount, minimal = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._connection.request({\n        path: \"/_api/foxx/configuration\",\n        qs: {\n          mount,\n          minimal\n        }\n      }, res => res.body);\n      if (!minimal || !Object.keys(result).every(key => result[key].title)) return result;\n      const values = {};\n\n      for (const key of Object.keys(result)) {\n        values[key] = result[key].current;\n      }\n\n      return values;\n    });\n  }\n\n  updateServiceConfiguration(mount, cfg, minimal = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._connection.request({\n        method: \"PATCH\",\n        path: \"/_api/foxx/configuration\",\n        body: cfg,\n        qs: {\n          mount,\n          minimal\n        }\n      }, res => res.body);\n\n      if (minimal || !result.values || !Object.keys(result.values).every(key => result.values[key].title)) {\n        return result;\n      }\n\n      const result2 = yield this.getServiceConfiguration(mount, minimal);\n\n      if (result.warnings) {\n        for (const key of Object.keys(result2)) {\n          result2[key].warning = result.warnings[key];\n        }\n      }\n\n      return result2;\n    });\n  }\n\n  replaceServiceConfiguration(mount, cfg, minimal = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._connection.request({\n        method: \"PUT\",\n        path: \"/_api/foxx/configuration\",\n        body: cfg,\n        qs: {\n          mount,\n          minimal\n        }\n      }, res => res.body);\n\n      if (minimal || !result.values || !Object.keys(result.values).every(key => result.values[key].title)) {\n        return result;\n      }\n\n      const result2 = yield this.getServiceConfiguration(mount, minimal);\n\n      if (result.warnings) {\n        for (const key of Object.keys(result2)) {\n          result2[key].warning = result.warnings[key];\n        }\n      }\n\n      return result2;\n    });\n  }\n\n  getServiceDependencies(mount, minimal = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._connection.request({\n        path: \"/_api/foxx/dependencies\",\n        qs: {\n          mount,\n          minimal\n        }\n      }, res => res.body);\n      if (!minimal || !Object.keys(result).every(key => result[key].title)) return result;\n      const values = {};\n\n      for (const key of Object.keys(result)) {\n        values[key] = result[key].current;\n      }\n\n      return values;\n    });\n  }\n\n  updateServiceDependencies(mount, cfg, minimal = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._connection.request({\n        method: \"PATCH\",\n        path: \"/_api/foxx/dependencies\",\n        body: cfg,\n        qs: {\n          mount,\n          minimal\n        }\n      }, res => res.body);\n\n      if (minimal || !result.values || !Object.keys(result.values).every(key => result.values[key].title)) {\n        return result;\n      }\n\n      const result2 = yield this.getServiceDependencies(mount, minimal);\n\n      if (result.warnings) {\n        for (const key of Object.keys(result2)) {\n          result2[key].warning = result.warnings[key];\n        }\n      }\n\n      return result2;\n    });\n  }\n\n  replaceServiceDependencies(mount, cfg, minimal = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._connection.request({\n        method: \"PUT\",\n        path: \"/_api/foxx/dependencies\",\n        body: cfg,\n        qs: {\n          mount,\n          minimal\n        }\n      }, res => res.body);\n\n      if (minimal || !result.values || !Object.keys(result.values).every(key => result.values[key].title)) {\n        return result;\n      }\n\n      const result2 = yield this.getServiceDependencies(mount, minimal);\n\n      if (result.warnings) {\n        for (const key of Object.keys(result2)) {\n          result2[key].warning = result.warnings[key];\n        }\n      }\n\n      return result2;\n    });\n  }\n\n  enableServiceDevelopmentMode(mount) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/foxx/development\",\n      qs: {\n        mount\n      }\n    }, res => res.body);\n  }\n\n  disableServiceDevelopmentMode(mount) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: \"/_api/foxx/development\",\n      qs: {\n        mount\n      }\n    }, res => res.body);\n  }\n\n  listServiceScripts(mount) {\n    return this._connection.request({\n      path: \"/_api/foxx/scripts\",\n      qs: {\n        mount\n      }\n    }, res => res.body);\n  }\n\n  runServiceScript(mount, name, args) {\n    return this._connection.request({\n      method: \"POST\",\n      path: `/_api/foxx/scripts/${name}`,\n      body: args,\n      qs: {\n        mount\n      }\n    }, res => res.body);\n  }\n\n  runServiceTests(mount, opts) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/foxx/tests\",\n      qs: Object.assign({}, opts, {\n        mount\n      })\n    }, res => res.body);\n  }\n\n  getServiceReadme(mount) {\n    return this._connection.request({\n      path: \"/_api/foxx/readme\",\n      qs: {\n        mount\n      }\n    }, res => res.body);\n  }\n\n  getServiceDocumentation(mount) {\n    return this._connection.request({\n      path: \"/_api/foxx/swagger\",\n      qs: {\n        mount\n      }\n    }, res => res.body);\n  }\n\n  downloadService(mount) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/foxx/download\",\n      qs: {\n        mount\n      },\n      expectBinary: true\n    }, res => res.body);\n  }\n\n  commitLocalServiceState(replace = false) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/foxx/commit\",\n      qs: {\n        replace\n      }\n    }, () => undefined);\n  }\n\n}\n\nexports.Database = Database;\n\nfunction coerceTransactionCollections(collections) {\n  if (typeof collections === \"string\") {\n    return {\n      write: [collections]\n    };\n  }\n\n  if (Array.isArray(collections)) {\n    return {\n      write: collections.map(colToString)\n    };\n  }\n\n  if (collection_1.isArangoCollection(collections)) {\n    return {\n      write: colToString(collections)\n    };\n  }\n\n  const cols = {};\n\n  if (collections) {\n    if (collections.read) {\n      cols.read = Array.isArray(collections.read) ? collections.read.map(colToString) : colToString(collections.read);\n    }\n\n    if (collections.write) {\n      cols.write = Array.isArray(collections.write) ? collections.write.map(colToString) : colToString(collections.write);\n    }\n\n    if (collections.exclusive) {\n      cols.exclusive = Array.isArray(collections.exclusive) ? collections.exclusive.map(colToString) : colToString(collections.exclusive);\n    }\n  }\n\n  return cols;\n}","map":{"version":3,"sources":["../../src/database.ts"],"names":[],"mappings":"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","sourcesContent":["import { AnalyzerDescription, ArangoAnalyzer } from \"./analyzer\";\nimport { AqlLiteral, AqlQuery, isAqlLiteral, isAqlQuery } from \"./aql-query\";\nimport {\n  ArangoCollection,\n  constructCollection,\n  DocumentCollection,\n  EdgeCollection,\n  isArangoCollection\n} from \"./collection\";\nimport { Config, Connection } from \"./connection\";\nimport { ArrayCursor } from \"./cursor\";\nimport { isArangoError } from \"./error\";\nimport { Graph } from \"./graph\";\nimport { Route } from \"./route\";\nimport { ArangoTransaction } from \"./transaction\";\nimport { btoa } from \"./util/btoa\";\nimport { toForm } from \"./util/multipart\";\nimport { ArangoSearchView, ArangoView, constructView, ViewType } from \"./view\";\n\nfunction colToString(collection: string | ArangoCollection): string {\n  if (isArangoCollection(collection)) {\n    return String(collection.name);\n  } else return String(collection);\n}\n\nexport type TransactionCollectionsObject = {\n  exclusive?: string | string[];\n  write?: string | string[];\n  read?: string | string[];\n};\n\nexport type TransactionCollections =\n  | string\n  | ArangoCollection\n  | (string | ArangoCollection)[]\n  | {\n      exclusive?: string | ArangoCollection | (string | ArangoCollection)[];\n      write?: string | ArangoCollection | (string | ArangoCollection)[];\n      read?: string | ArangoCollection | (string | ArangoCollection)[];\n    };\n\nexport type TransactionOptions = {\n  allowImplicit?: boolean;\n  lockTimeout?: number;\n  maxTransactionSize?: number;\n  /** @deprecated removed in ArangoDB 3.4, RocksDB-only */\n  intermediateCommitCount?: number;\n  /** @deprecated removed in ArangoDB 3.4, RocksDB-only */\n  intermediateCommitSize?: number;\n  waitForSync?: boolean;\n};\n\nexport type ServiceOptions = {\n  [key: string]: any;\n  configuration?: { [key: string]: any };\n  dependencies?: { [key: string]: any };\n};\n\nexport type QueryOptions = {\n  allowDirtyRead?: boolean;\n  count?: boolean;\n  batchSize?: number;\n  cache?: boolean;\n  memoryLimit?: number;\n  maxRuntime?: number;\n  ttl?: number;\n  timeout?: number;\n  options?: {\n    failOnWarning?: boolean;\n    profile?: boolean;\n    maxTransactionSize?: number;\n    stream?: boolean;\n    skipInaccessibleCollections?: boolean;\n    maxWarningsCount?: number;\n    /** RocksDB-only */\n    intermediateCommitCount?: number;\n    satteliteSyncWait?: number;\n    fullCount?: boolean;\n    /** RocksDB-only */\n    intermediateCommitSize?: number;\n    optimizer?: { rules?: string[] };\n    maxPlans?: number;\n  };\n};\n\nexport type ExplainOptions = {\n  optimizer?: { rules?: string[] };\n  maxNumberOfPlans?: number;\n  allPlans?: boolean;\n};\n\nexport type TransactionDetails = {\n  id: string;\n  state: \"running\" | \"committed\" | \"aborted\";\n};\n\nexport type ExplainPlan = {\n  nodes: any[];\n  rules: any[];\n  collections: any[];\n  variables: any[];\n  estimatedCost: number;\n  estimatedNrItems: number;\n  initialize: boolean;\n  isModificationQuery: boolean;\n};\n\nexport type ExplainResult = {\n  plan?: ExplainPlan;\n  plans?: Array<ExplainPlan>;\n  cacheable: boolean;\n  warnings: any[];\n  stats: {\n    rulesExecuted: number;\n    rulesSkipped: number;\n    plansCreated: number;\n  };\n};\n\nexport type ParseResult = {\n  parsed: boolean;\n  collections: any[];\n  bindVars: any[];\n  ast: any[];\n};\n\nexport type QueryTracking = {\n  enabled: boolean;\n  maxQueryStringLength: number;\n  maxSlowQueries: number;\n  slowQueryThreshold: number;\n  trackBindVars: boolean;\n  trackSlowQueries: boolean;\n};\n\nexport type QueryTrackingOptions = {\n  enabled?: boolean;\n  maxQueryStringLength?: number;\n  maxSlowQueries?: number;\n  slowQueryThreshold?: number;\n  trackBindVars?: boolean;\n  trackSlowQueries?: boolean;\n};\n\nexport type RunningQuery = {\n  id: string;\n  query: string;\n  bindVars: any;\n  runTime: number;\n  started: string;\n  state: string; // TODO determine valid states: executing, finished, ...?\n  stream: boolean;\n};\n\nexport interface ViewDescription {\n  id: string;\n  name: string;\n  type: ViewType;\n}\n\nexport interface CreateDatabaseUser {\n  username: string;\n  passwd?: string;\n  active?: boolean;\n  extra?: { [key: string]: any };\n}\n\nconst DATABASE_NOT_FOUND = 1228;\nexport class Database {\n  private _connection: Connection;\n\n  constructor(config?: Config) {\n    this._connection = new Connection(config);\n  }\n\n  get name(): string | null {\n    return this._connection.getDatabaseName() || null;\n  }\n\n  //#region misc\n  version(): Promise<any> {\n    return this._connection.request(\n      {\n        method: \"GET\",\n        path: \"/_api/version\"\n      },\n      res => res.body\n    );\n  }\n\n  route(path?: string, headers?: Object): Route {\n    return new Route(this._connection, path, headers);\n  }\n\n  async acquireHostList(): Promise<void> {\n    if (!this._connection.getDatabaseName()) {\n      throw new Error(\"Cannot acquire host list with absolute URL\");\n    }\n    const urls: string[] = await this._connection.request(\n      { path: \"/_api/cluster/endpoints\" },\n      res => res.body.endpoints.map((endpoint: any) => endpoint.endpoint)\n    );\n    this._connection.addToHostList(urls);\n  }\n\n  close(): void {\n    this._connection.close();\n  }\n  //#endregion\n\n  //#region auth\n  login(username: string = \"root\", password: string = \"\"): Promise<string> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_open/auth\",\n        body: { username, password }\n      },\n      res => {\n        this.useBearerAuth(res.body.jwt);\n        return res.body.jwt;\n      }\n    );\n  }\n\n  useBearerAuth(token: string): this {\n    this._connection.setHeader(\"authorization\", `Bearer ${token}`);\n    return this;\n  }\n\n  useBasicAuth(username: string = \"root\", password: string = \"\"): this {\n    this._connection.setHeader(\n      \"authorization\",\n      `Basic ${btoa(`${username}:${password}`)}`\n    );\n    return this;\n  }\n  //#endregion\n\n  //#region databases\n  useDatabase(databaseName: string): this {\n    this._connection.setDatabaseName(databaseName);\n    return this;\n  }\n\n  get() {\n    return this._connection.request(\n      { path: \"/_api/database/current\" },\n      res => res.body.result\n    );\n  }\n\n  exists(): Promise<boolean> {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === DATABASE_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  createDatabase(\n    databaseName: string,\n    users?: CreateDatabaseUser[]\n  ): Promise<any> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/database\",\n        body: { users, name: databaseName }\n      },\n      res => res.body\n    );\n  }\n\n  listDatabases() {\n    return this._connection.request(\n      { path: \"/_api/database\" },\n      res => res.body.result\n    );\n  }\n\n  listUserDatabases() {\n    return this._connection.request(\n      { path: \"/_api/database/user\" },\n      res => res.body.result\n    );\n  }\n\n  dropDatabase(databaseName: string) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/database/${databaseName}`\n      },\n      res => res.body\n    );\n  }\n  //#endregion\n\n  //#region collections\n  collection<T extends object = any>(\n    collectionName: string\n  ): DocumentCollection<T> {\n    return new DocumentCollection(this._connection, collectionName);\n  }\n\n  edgeCollection<T extends object = any>(\n    collectionName: string\n  ): EdgeCollection<T> {\n    return new EdgeCollection(this._connection, collectionName);\n  }\n\n  listCollections(excludeSystem: boolean = true) {\n    return this._connection.request(\n      {\n        path: \"/_api/collection\",\n        qs: { excludeSystem }\n      },\n      res =>\n        this._connection.arangoMajor <= 2\n          ? res.body.collections\n          : res.body.result\n    );\n  }\n\n  async collections(\n    excludeSystem: boolean = true\n  ): Promise<ArangoCollection[]> {\n    const collections = await this.listCollections(excludeSystem);\n    return collections.map((data: any) =>\n      constructCollection(this._connection, data)\n    );\n  }\n\n  async truncate(excludeSystem: boolean = true) {\n    const collections = await this.listCollections(excludeSystem);\n    return await Promise.all(\n      collections.map((data: any) =>\n        this._connection.request(\n          {\n            method: \"PUT\",\n            path: `/_api/collection/${data.name}/truncate`\n          },\n          res => res.body\n        )\n      )\n    );\n  }\n  //#endregion\n\n  //#region views\n  arangoSearchView(viewName: string): ArangoSearchView {\n    return new ArangoSearchView(this._connection, viewName);\n  }\n\n  listViews(): Promise<ViewDescription[]> {\n    return this._connection.request(\n      { path: \"/_api/view\" },\n      res => res.body.result\n    );\n  }\n\n  async views(): Promise<ArangoView[]> {\n    const views = await this.listViews();\n    return views.map((data: any) => constructView(this._connection, data));\n  }\n  //#endregion\n\n  //#region analyzers\n  analyzer(name: string): ArangoAnalyzer {\n    return new ArangoAnalyzer(this._connection, name);\n  }\n\n  listAnalyzers(): Promise<AnalyzerDescription[]> {\n    return this._connection.request(\n      { path: \"/_api/analyzer\" },\n      res => res.body.result\n    );\n  }\n\n  async analyzers(): Promise<ArangoAnalyzer[]> {\n    const analyzers = await this.listAnalyzers();\n    return analyzers.map(data => this.analyzer(data.name));\n  }\n  //#endregion\n\n  //#region transactions\n  executeTransaction(\n    collections: TransactionCollections,\n    action: string,\n    options?: TransactionOptions & { params?: any }\n  ): Promise<any> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/transaction\",\n        body: {\n          collections: coerceTransactionCollections(collections),\n          action,\n          ...options\n        }\n      },\n      res => res.body.result\n    );\n  }\n\n  transaction(transactionId: string): ArangoTransaction;\n  transaction(\n    collections: TransactionCollections,\n    action: string,\n    params?: any,\n    options?: TransactionOptions\n  ): Promise<any>;\n  transaction(\n    collections: TransactionCollections,\n    action: string,\n    lockTimeout?: number\n  ): Promise<any>;\n  transaction(\n    collections: TransactionCollections,\n    action: string,\n    params?: any,\n    lockTimeout?: number\n  ): Promise<any>;\n  transaction(\n    collectionsOrId: TransactionCollections | string,\n    action?: string,\n    params?: any | number,\n    options?: TransactionOptions | number\n  ): Promise<any> | ArangoTransaction {\n    if (arguments.length === 1 && typeof collectionsOrId === \"string\") {\n      return new ArangoTransaction(this._connection, collectionsOrId);\n    }\n    if (typeof params === \"number\") {\n      options = params;\n      params = undefined;\n    }\n    if (typeof options === \"number\") {\n      options = { lockTimeout: options };\n    }\n    return this.executeTransaction(collectionsOrId, action!, {\n      params,\n      ...options\n    });\n  }\n\n  beginTransaction(\n    collections: TransactionCollections,\n    options?: TransactionOptions\n  ): Promise<ArangoTransaction> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/transaction/begin\",\n        body: {\n          collections: coerceTransactionCollections(collections),\n          ...options\n        }\n      },\n      res => new ArangoTransaction(this._connection, res.body.result.id)\n    );\n  }\n\n  listTransactions(): Promise<TransactionDetails[]> {\n    return this._connection.request(\n      { path: \"/_api/transaction\" },\n      res => res.body.transactions\n    );\n  }\n\n  async transactions(): Promise<ArangoTransaction[]> {\n    const transactions = await this.listTransactions();\n    return transactions.map(data => this.transaction(data.id));\n  }\n  //#endregion\n\n  //#region graphs\n  graph(graphName: string): Graph {\n    return new Graph(this._connection, graphName);\n  }\n\n  listGraphs() {\n    return this._connection.request(\n      { path: \"/_api/gharial\" },\n      res => res.body.graphs\n    );\n  }\n\n  async graphs(): Promise<Graph[]> {\n    const graphs = await this.listGraphs();\n    return graphs.map((data: any) => this.graph(data._key));\n  }\n  //#endregion\n\n  //#region queries\n  query(query: string | AqlQuery | AqlLiteral): Promise<ArrayCursor>;\n  query(query: AqlQuery, opts?: QueryOptions): Promise<ArrayCursor>;\n  query(\n    query: string | AqlLiteral,\n    bindVars?: any,\n    opts?: QueryOptions\n  ): Promise<ArrayCursor>;\n  query(\n    query: string | AqlQuery | AqlLiteral,\n    bindVars?: any,\n    opts?: QueryOptions\n  ): Promise<ArrayCursor> {\n    if (isAqlQuery(query)) {\n      opts = bindVars;\n      bindVars = query.bindVars;\n      query = query.query;\n    } else if (isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    const { allowDirtyRead = undefined, timeout = undefined, ...extra } =\n      opts || {};\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/cursor\",\n        body: { ...extra, query, bindVars },\n        allowDirtyRead,\n        timeout\n      },\n      res =>\n        new ArrayCursor(\n          this._connection,\n          res.body,\n          res.arangojsHostId,\n          allowDirtyRead\n        )\n    );\n  }\n\n  explain(query: string | AqlQuery | AqlLiteral): Promise<ExplainResult>;\n  explain(query: AqlQuery, opts?: ExplainOptions): Promise<ExplainResult>;\n  explain(\n    query: string | AqlLiteral,\n    bindVars?: any,\n    opts?: ExplainOptions\n  ): Promise<ExplainResult>;\n  explain(\n    query: string | AqlQuery | AqlLiteral,\n    bindVars?: any,\n    opts?: ExplainOptions\n  ): Promise<ExplainResult> {\n    if (isAqlQuery(query)) {\n      opts = bindVars;\n      bindVars = query.bindVars;\n      query = query.query;\n    } else if (isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/explain\",\n        body: { options: opts, query, bindVars }\n      },\n      res => res.body\n    );\n  }\n\n  parse(query: string | AqlQuery | AqlLiteral): Promise<ParseResult>;\n  parse(query: AqlQuery): Promise<ParseResult>;\n  parse(query: string | AqlLiteral): Promise<ParseResult>;\n  parse(query: string | AqlQuery | AqlLiteral): Promise<ParseResult> {\n    if (isAqlQuery(query)) {\n      query = query.query;\n    } else if (isAqlLiteral(query)) {\n      query = query.toAQL();\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/query\",\n        body: { query }\n      },\n      res => res.body\n    );\n  }\n\n  queryTracking(): Promise<QueryTracking> {\n    return this._connection.request(\n      {\n        method: \"GET\",\n        path: \"/_api/query/properties\"\n      },\n      res => res.body\n    );\n  }\n\n  setQueryTracking(opts?: QueryTrackingOptions): Promise<QueryTracking> {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/query/properties\",\n        body: opts\n      },\n      res => res.body\n    );\n  }\n\n  listRunningQueries(): Promise<Array<RunningQuery>> {\n    return this._connection.request(\n      {\n        method: \"GET\",\n        path: \"/_api/query/current\"\n      },\n      res => res.body\n    );\n  }\n\n  listSlowQueries(): Promise<any> {\n    return this._connection.request(\n      {\n        method: \"GET\",\n        path: \"/_api/query/slow\"\n      },\n      res => res.body\n    );\n  }\n\n  clearSlowQueries(): Promise<void> {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: \"/_api/query/slow\"\n      },\n      () => undefined\n    );\n  }\n\n  killQuery(queryId: string): Promise<void> {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/query/${queryId}`\n      },\n      () => undefined\n    );\n  }\n  //#endregion\n\n  //#region functions\n  listFunctions() {\n    return this._connection.request(\n      { path: \"/_api/aqlfunction\" },\n      res => res.body\n    );\n  }\n\n  createFunction(name: string, code: string) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/aqlfunction\",\n        body: { name, code }\n      },\n      res => res.body\n    );\n  }\n\n  dropFunction(name: string, group: boolean = false) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/aqlfunction/${name}`,\n        body: { group }\n      },\n      res => res.body\n    );\n  }\n  //#endregion\n\n  //#region services\n  listServices() {\n    return this._connection.request({ path: \"/_api/foxx\" }, res => res.body);\n  }\n\n  async installService(mount: string, source: any, opts: ServiceOptions = {}) {\n    const { configuration, dependencies, ...qs } = opts;\n    const req = await toForm({\n      configuration,\n      dependencies,\n      source\n    });\n    return await this._connection.request(\n      {\n        ...req,\n        method: \"POST\",\n        path: \"/_api/foxx\",\n        isBinary: true,\n        qs: { ...qs, mount }\n      },\n      res => res.body\n    );\n  }\n\n  async upgradeService(mount: string, source: any, opts: ServiceOptions = {}) {\n    const { configuration, dependencies, ...qs } = opts;\n    const req = await toForm({\n      configuration,\n      dependencies,\n      source\n    });\n    return await this._connection.request(\n      {\n        ...req,\n        method: \"PATCH\",\n        path: \"/_api/foxx/service\",\n        isBinary: true,\n        qs: { ...qs, mount }\n      },\n      res => res.body\n    );\n  }\n\n  async replaceService(mount: string, source: any, opts: ServiceOptions = {}) {\n    const { configuration, dependencies, ...qs } = opts;\n    const req = await toForm({\n      configuration,\n      dependencies,\n      source\n    });\n    return await this._connection.request(\n      {\n        ...req,\n        method: \"PUT\",\n        path: \"/_api/foxx/service\",\n        isBinary: true,\n        qs: { ...qs, mount }\n      },\n      res => res.body\n    );\n  }\n\n  uninstallService(mount: string, opts: any = {}): Promise<void> {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: \"/_api/foxx/service\",\n        qs: { ...opts, mount }\n      },\n      () => undefined\n    );\n  }\n\n  getService(mount: string) {\n    return this._connection.request(\n      {\n        path: \"/_api/foxx/service\",\n        qs: { mount }\n      },\n      res => res.body\n    );\n  }\n\n  async getServiceConfiguration(mount: string, minimal: boolean = false) {\n    const result = await this._connection.request(\n      {\n        path: \"/_api/foxx/configuration\",\n        qs: { mount, minimal }\n      },\n      res => res.body\n    );\n    if (\n      !minimal ||\n      !Object.keys(result).every((key: string) => result[key].title)\n    )\n      return result;\n    const values: any = {};\n    for (const key of Object.keys(result)) {\n      values[key] = result[key].current;\n    }\n    return values;\n  }\n\n  async updateServiceConfiguration(\n    mount: string,\n    cfg: any,\n    minimal: boolean = false\n  ) {\n    const result = await this._connection.request(\n      {\n        method: \"PATCH\",\n        path: \"/_api/foxx/configuration\",\n        body: cfg,\n        qs: { mount, minimal }\n      },\n      res => res.body\n    );\n    if (\n      minimal ||\n      !result.values ||\n      !Object.keys(result.values).every(\n        (key: string) => result.values[key].title\n      )\n    ) {\n      return result;\n    }\n    const result2 = await this.getServiceConfiguration(mount, minimal);\n    if (result.warnings) {\n      for (const key of Object.keys(result2)) {\n        result2[key].warning = result.warnings[key];\n      }\n    }\n    return result2;\n  }\n\n  async replaceServiceConfiguration(\n    mount: string,\n    cfg: any,\n    minimal: boolean = false\n  ) {\n    const result = await this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/foxx/configuration\",\n        body: cfg,\n        qs: { mount, minimal }\n      },\n      res => res.body\n    );\n    if (\n      minimal ||\n      !result.values ||\n      !Object.keys(result.values).every(\n        (key: string) => result.values[key].title\n      )\n    ) {\n      return result;\n    }\n    const result2 = await this.getServiceConfiguration(mount, minimal);\n    if (result.warnings) {\n      for (const key of Object.keys(result2)) {\n        result2[key].warning = result.warnings[key];\n      }\n    }\n    return result2;\n  }\n\n  async getServiceDependencies(mount: string, minimal: boolean = false) {\n    const result = await this._connection.request(\n      {\n        path: \"/_api/foxx/dependencies\",\n        qs: { mount, minimal }\n      },\n      res => res.body\n    );\n    if (\n      !minimal ||\n      !Object.keys(result).every((key: string) => result[key].title)\n    )\n      return result;\n    const values: any = {};\n    for (const key of Object.keys(result)) {\n      values[key] = result[key].current;\n    }\n    return values;\n  }\n\n  async updateServiceDependencies(\n    mount: string,\n    cfg: any,\n    minimal: boolean = false\n  ) {\n    const result = await this._connection.request(\n      {\n        method: \"PATCH\",\n        path: \"/_api/foxx/dependencies\",\n        body: cfg,\n        qs: { mount, minimal }\n      },\n      res => res.body\n    );\n    if (\n      minimal ||\n      !result.values ||\n      !Object.keys(result.values).every(\n        (key: string) => result.values[key].title\n      )\n    ) {\n      return result;\n    }\n    const result2 = await this.getServiceDependencies(mount, minimal);\n    if (result.warnings) {\n      for (const key of Object.keys(result2)) {\n        result2[key].warning = result.warnings[key];\n      }\n    }\n    return result2;\n  }\n\n  async replaceServiceDependencies(\n    mount: string,\n    cfg: { [key: string]: string },\n    minimal: boolean = false\n  ) {\n    const result = await this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/foxx/dependencies\",\n        body: cfg,\n        qs: { mount, minimal }\n      },\n      res => res.body\n    );\n    if (\n      minimal ||\n      !result.values ||\n      !Object.keys(result.values).every(\n        (key: string) => result.values[key].title\n      )\n    ) {\n      return result;\n    }\n    const result2 = await this.getServiceDependencies(mount, minimal);\n    if (result.warnings) {\n      for (const key of Object.keys(result2)) {\n        result2[key].warning = result.warnings[key];\n      }\n    }\n    return result2;\n  }\n\n  enableServiceDevelopmentMode(mount: string) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/foxx/development\",\n        qs: { mount }\n      },\n      res => res.body\n    );\n  }\n\n  disableServiceDevelopmentMode(mount: string) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: \"/_api/foxx/development\",\n        qs: { mount }\n      },\n      res => res.body\n    );\n  }\n\n  listServiceScripts(mount: string) {\n    return this._connection.request(\n      {\n        path: \"/_api/foxx/scripts\",\n        qs: { mount }\n      },\n      res => res.body\n    );\n  }\n\n  runServiceScript(mount: string, name: string, args: any): Promise<any> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/foxx/scripts/${name}`,\n        body: args,\n        qs: { mount }\n      },\n      res => res.body\n    );\n  }\n\n  runServiceTests(mount: string, opts: any): Promise<any> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/foxx/tests\",\n        qs: {\n          ...opts,\n          mount\n        }\n      },\n      res => res.body\n    );\n  }\n\n  getServiceReadme(mount: string): Promise<string | undefined> {\n    return this._connection.request(\n      {\n        path: \"/_api/foxx/readme\",\n        qs: { mount }\n      },\n      res => res.body\n    );\n  }\n\n  getServiceDocumentation(mount: string): Promise<any> {\n    return this._connection.request(\n      {\n        path: \"/_api/foxx/swagger\",\n        qs: { mount }\n      },\n      res => res.body\n    );\n  }\n\n  downloadService(mount: string): Promise<Buffer | Blob> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/foxx/download\",\n        qs: { mount },\n        expectBinary: true\n      },\n      res => res.body\n    );\n  }\n\n  commitLocalServiceState(replace: boolean = false): Promise<void> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/foxx/commit\",\n        qs: { replace }\n      },\n      () => undefined\n    );\n  }\n  //#endregion\n}\n\nfunction coerceTransactionCollections(\n  collections: TransactionCollections\n): TransactionCollectionsObject {\n  if (typeof collections === \"string\") {\n    return { write: [collections] };\n  }\n  if (Array.isArray(collections)) {\n    return { write: collections.map(colToString) };\n  }\n  if (isArangoCollection(collections)) {\n    return { write: colToString(collections) };\n  }\n  const cols: TransactionCollectionsObject = {};\n  if (collections) {\n    if (collections.read) {\n      cols.read = Array.isArray(collections.read)\n        ? collections.read.map(colToString)\n        : colToString(collections.read);\n    }\n    if (collections.write) {\n      cols.write = Array.isArray(collections.write)\n        ? collections.write.map(colToString)\n        : colToString(collections.write);\n    }\n    if (collections.exclusive) {\n      cols.exclusive = Array.isArray(collections.exclusive)\n        ? collections.exclusive.map(colToString)\n        : colToString(collections.exclusive);\n    }\n  }\n  return cols;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}