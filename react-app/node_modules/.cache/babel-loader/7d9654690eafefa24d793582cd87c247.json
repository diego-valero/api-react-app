{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst collection_1 = require(\"./collection\");\n\nconst error_1 = require(\"./error\");\n\nclass GraphVertexCollection extends collection_1.BaseCollection {\n  constructor(connection, name, graph) {\n    super(connection, name);\n    this.type = collection_1.CollectionType.DOCUMENT_COLLECTION;\n    this.graph = graph;\n  }\n\n  document(documentHandle, opts = {}) {\n    if (typeof opts === \"boolean\") {\n      opts = {\n        graceful: opts\n      };\n    }\n\n    const {\n      allowDirtyRead = undefined,\n      graceful = false\n    } = opts;\n\n    const result = this._connection.request({\n      path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(documentHandle)}`,\n      allowDirtyRead\n    }, res => res.body.vertex);\n\n    if (!graceful) return result;\n    return result.catch(err => {\n      if (error_1.isArangoError(err) && err.errorNum === collection_1.DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n\n      throw err;\n    });\n  }\n\n  vertex(documentHandle, opts = {}) {\n    if (typeof opts === \"boolean\") {\n      opts = {\n        graceful: opts\n      };\n    }\n\n    return this.document(documentHandle, opts);\n  }\n\n  save(data, opts) {\n    return this._connection.request({\n      method: \"POST\",\n      path: `/_api/gharial/${this.graph.name}/vertex/${this.name}`,\n      body: data,\n      qs: opts\n    }, res => res.body.vertex);\n  }\n\n  replace(documentHandle, newValue, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"PUT\",\n      path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(documentHandle)}`,\n      body: newValue,\n      qs: opts,\n      headers\n    }, res => res.body.vertex);\n  }\n\n  update(documentHandle, newValue, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"PATCH\",\n      path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(documentHandle)}`,\n      body: newValue,\n      qs: opts,\n      headers\n    }, res => res.body.vertex);\n  }\n\n  remove(documentHandle, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(documentHandle)}`,\n      qs: opts,\n      headers\n    }, res => res.body.removed);\n  }\n\n}\n\nexports.GraphVertexCollection = GraphVertexCollection;\n\nclass GraphEdgeCollection extends collection_1.EdgeCollection {\n  constructor(connection, name, graph) {\n    super(connection, name);\n    this.type = collection_1.CollectionType.EDGE_COLLECTION;\n    this.type = collection_1.CollectionType.EDGE_COLLECTION;\n    this.graph = graph;\n  }\n\n  document(documentHandle, opts = {}) {\n    if (typeof opts === \"boolean\") {\n      opts = {\n        graceful: opts\n      };\n    }\n\n    const {\n      allowDirtyRead = undefined,\n      graceful = false\n    } = opts;\n\n    const result = this._connection.request({\n      path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(documentHandle)}`,\n      allowDirtyRead\n    }, res => res.body.edge);\n\n    if (!graceful) return result;\n    return result.catch(err => {\n      if (error_1.isArangoError(err) && err.errorNum === collection_1.DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n\n      throw err;\n    });\n  }\n\n  save(data, fromIdOrOpts, toId, opts) {\n    if (toId !== undefined) {\n      const fromId = this._documentHandle(fromIdOrOpts);\n\n      toId = this._documentHandle(toId);\n\n      if (Array.isArray(data)) {\n        data = data.map(data => Object.assign({}, data, {\n          _from: fromId,\n          _to: toId\n        }));\n      } else {\n        data = Object.assign({}, data, {\n          _from: fromId,\n          _to: toId\n        });\n      }\n    } else {\n      if (fromIdOrOpts !== undefined) {\n        opts = fromIdOrOpts;\n      }\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: `/_api/gharial/${this.graph.name}/edge/${this.name}`,\n      body: data,\n      qs: opts\n    }, res => res.body.edge);\n  }\n\n  replace(documentHandle, newValue, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"PUT\",\n      path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(documentHandle)}`,\n      body: newValue,\n      qs: opts,\n      headers\n    }, res => res.body.edge);\n  }\n\n  update(documentHandle, newValue, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"PATCH\",\n      path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(documentHandle)}`,\n      body: newValue,\n      qs: opts,\n      headers\n    }, res => res.body.edge);\n  }\n\n  remove(documentHandle, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(documentHandle)}`,\n      qs: opts,\n      headers\n    }, res => res.body.removed);\n  }\n\n}\n\nexports.GraphEdgeCollection = GraphEdgeCollection;\nconst GRAPH_NOT_FOUND = 1924;\n\nclass Graph {\n  constructor(connection, name) {\n    this.name = name;\n    this._connection = connection;\n  }\n\n  get() {\n    return this._connection.request({\n      path: `/_api/gharial/${this.name}`\n    }, res => res.body.graph);\n  }\n\n  exists() {\n    return this.get().then(() => true, err => {\n      if (error_1.isArangoError(err) && err.errorNum === GRAPH_NOT_FOUND) {\n        return false;\n      }\n\n      throw err;\n    });\n  }\n\n  create(properties = {}, opts) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/gharial\",\n      body: Object.assign({}, properties, {\n        name: this.name\n      }),\n      qs: opts\n    }, res => res.body.graph);\n  }\n\n  drop(dropCollections = false) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/gharial/${this.name}`,\n      qs: {\n        dropCollections\n      }\n    }, res => res.body.removed);\n  }\n\n  vertexCollection(collectionName) {\n    return new GraphVertexCollection(this._connection, collectionName, this);\n  }\n\n  listVertexCollections(opts) {\n    return this._connection.request({\n      path: `/_api/gharial/${this.name}/vertex`,\n      qs: opts\n    }, res => res.body.collections);\n  }\n\n  vertexCollections(opts) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const names = yield this.listVertexCollections(opts);\n      return names.map(name => new GraphVertexCollection(this._connection, name, this));\n    });\n  }\n\n  addVertexCollection(collection) {\n    if (collection_1.isArangoCollection(collection)) {\n      collection = collection.name;\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: `/_api/gharial/${this.name}/vertex`,\n      body: {\n        collection\n      }\n    }, res => res.body.graph);\n  }\n\n  removeVertexCollection(collection, dropCollection = false) {\n    if (collection_1.isArangoCollection(collection)) {\n      collection = collection.name;\n    }\n\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/gharial/${this.name}/vertex/${collection}`,\n      qs: {\n        dropCollection\n      }\n    }, res => res.body.graph);\n  }\n\n  edgeCollection(collectionName) {\n    return new GraphEdgeCollection(this._connection, collectionName, this);\n  }\n\n  listEdgeCollections() {\n    return this._connection.request({\n      path: `/_api/gharial/${this.name}/edge`\n    }, res => res.body.collections);\n  }\n\n  edgeCollections() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const names = yield this.listEdgeCollections();\n      return names.map(name => new GraphEdgeCollection(this._connection, name, this));\n    });\n  }\n\n  addEdgeDefinition(definition) {\n    return this._connection.request({\n      method: \"POST\",\n      path: `/_api/gharial/${this.name}/edge`,\n      body: definition\n    }, res => res.body.graph);\n  }\n\n  replaceEdgeDefinition(definitionName, definition) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: `/_api/gharial/${this.name}/edge/${definitionName}`,\n      body: definition\n    }, res => res.body.graph);\n  }\n\n  removeEdgeDefinition(definitionName, dropCollection = false) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/gharial/${this.name}/edge/${definitionName}`,\n      qs: {\n        dropCollection\n      }\n    }, res => res.body.graph);\n  }\n\n  traversal(startVertex, opts) {\n    return this._connection.request({\n      method: \"POST\",\n      path: `/_api/traversal`,\n      body: Object.assign({}, opts, {\n        startVertex,\n        graphName: this.name\n      })\n    }, res => res.body.result);\n  }\n\n}\n\nexports.Graph = Graph;","map":{"version":3,"sources":["../../src/graph.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  ArangoCollection,\n  BaseCollection,\n  CollectionType,\n  DocumentHandle,\n  DocumentReadOptions,\n  DOCUMENT_NOT_FOUND,\n  EdgeCollection,\n  isArangoCollection\n} from \"./collection\";\nimport { Connection } from \"./connection\";\nimport { isArangoError } from \"./error\";\n\nexport interface InsertOptions {\n  waitForSync?: boolean;\n  returnNew?: boolean;\n}\n\nexport interface ReplaceOptions extends InsertOptions {\n  waitForSync?: boolean;\n  keepNull?: boolean;\n  returnOld?: boolean;\n  returnNew?: boolean;\n  rev?: string;\n}\n\nexport interface RemoveOptions {\n  waitForSync?: boolean;\n  returnOld?: boolean;\n  rev?: string;\n}\n\nexport interface UpdateOptions extends ReplaceOptions {}\n\nexport class GraphVertexCollection extends BaseCollection {\n  type = CollectionType.DOCUMENT_COLLECTION;\n\n  graph: Graph;\n\n  constructor(connection: Connection, name: string, graph: Graph) {\n    super(connection, name);\n    this.graph = graph;\n  }\n\n  document(documentHandle: DocumentHandle, graceful: boolean): Promise<any>;\n  document(\n    documentHandle: DocumentHandle,\n    opts?: DocumentReadOptions\n  ): Promise<any>;\n  document(\n    documentHandle: DocumentHandle,\n    opts: boolean | DocumentReadOptions = {}\n  ): Promise<any> {\n    if (typeof opts === \"boolean\") {\n      opts = { graceful: opts };\n    }\n    const { allowDirtyRead = undefined, graceful = false } = opts;\n    const result = this._connection.request(\n      {\n        path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(\n          documentHandle\n        )}`,\n        allowDirtyRead\n      },\n      res => res.body.vertex\n    );\n    if (!graceful) return result;\n    return result.catch(err => {\n      if (isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n      throw err;\n    });\n  }\n\n  vertex(documentHandle: DocumentHandle, graceful: boolean): Promise<any>;\n  vertex(\n    documentHandle: DocumentHandle,\n    opts?: DocumentReadOptions\n  ): Promise<any>;\n  vertex(\n    documentHandle: DocumentHandle,\n    opts: boolean | DocumentReadOptions = {}\n  ): Promise<any> {\n    if (typeof opts === \"boolean\") {\n      opts = { graceful: opts };\n    }\n    return this.document(documentHandle, opts);\n  }\n\n  save(data: Object | Array<Object>, opts?: InsertOptions) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${this.graph.name}/vertex/${this.name}`,\n        body: data,\n        qs: opts\n      },\n      res => res.body.vertex\n    );\n  }\n\n  replace(\n    documentHandle: DocumentHandle,\n    newValue: Object | Array<Object>,\n    opts: ReplaceOptions | string = {}\n  ) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(\n          documentHandle\n        )}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body.vertex\n    );\n  }\n\n  update(\n    documentHandle: DocumentHandle,\n    newValue: Object | Array<Object>,\n    opts: UpdateOptions | string = {}\n  ) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(\n          documentHandle\n        )}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body.vertex\n    );\n  }\n\n  remove(documentHandle: DocumentHandle, opts: RemoveOptions | string = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.graph.name}/vertex/${this._documentHandle(\n          documentHandle\n        )}`,\n        qs: opts,\n        headers\n      },\n      res => res.body.removed\n    );\n  }\n}\n\nexport class GraphEdgeCollection extends EdgeCollection {\n  type = CollectionType.EDGE_COLLECTION;\n\n  graph: Graph;\n\n  constructor(connection: Connection, name: string, graph: Graph) {\n    super(connection, name);\n    this.type = CollectionType.EDGE_COLLECTION;\n    this.graph = graph;\n  }\n\n  document(documentHandle: DocumentHandle, graceful: boolean): Promise<any>;\n  document(\n    documentHandle: DocumentHandle,\n    opts?: DocumentReadOptions\n  ): Promise<any>;\n  document(\n    documentHandle: DocumentHandle,\n    opts: boolean | DocumentReadOptions = {}\n  ): Promise<any> {\n    if (typeof opts === \"boolean\") {\n      opts = { graceful: opts };\n    }\n    const { allowDirtyRead = undefined, graceful = false } = opts;\n    const result = this._connection.request(\n      {\n        path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(\n          documentHandle\n        )}`,\n        allowDirtyRead\n      },\n      res => res.body.edge\n    );\n    if (!graceful) return result;\n    return result.catch(err => {\n      if (isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n      throw err;\n    });\n  }\n\n  save(\n    data: Object | Array<Object>,\n    opts?: InsertOptions\n  ): Promise<any>;\n  save(\n    data: Object | Array<Object>,\n    fromId: DocumentHandle,\n    toId: DocumentHandle,\n    opts?: InsertOptions\n  ): Promise<any>;\n  save(\n    data: Object | Array<Object>,\n    fromIdOrOpts?: DocumentHandle | InsertOptions,\n    toId?: DocumentHandle,\n    opts?: InsertOptions\n  ) {\n    if (toId !== undefined) {\n      const fromId = this._documentHandle(fromIdOrOpts as DocumentHandle);\n      toId = this._documentHandle(toId);\n      if (Array.isArray(data)) {\n        data = data.map(data => ({ ...data, _from: fromId, _to: toId }));\n      } else {\n        data = { ...data, _from: fromId, _to: toId };\n      }\n    } else {\n      if (fromIdOrOpts !== undefined) {\n        opts = fromIdOrOpts as InsertOptions;\n      }\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${this.graph.name}/edge/${this.name}`,\n        body: data,\n        qs: opts\n      },\n      res => res.body.edge\n    );\n  }\n\n  replace(\n    documentHandle: DocumentHandle,\n    newValue: Object | Array<Object>,\n    opts: ReplaceOptions | string = {}\n  ) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(\n          documentHandle\n        )}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body.edge\n    );\n  }\n\n  update(\n    documentHandle: DocumentHandle,\n    newValue: Object | Array<Object>,\n    opts: UpdateOptions | string = {}\n  ) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(\n          documentHandle\n        )}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body.edge\n    );\n  }\n\n  remove(documentHandle: DocumentHandle, opts: RemoveOptions | string = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev) {\n      let rev: string;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev;\n    }\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.graph.name}/edge/${this._documentHandle(\n          documentHandle\n        )}`,\n        qs: opts,\n        headers\n      },\n      res => res.body.removed\n    );\n  }\n}\n\nconst GRAPH_NOT_FOUND = 1924;\nexport class Graph {\n  name: string;\n\n  private _connection: Connection;\n\n  constructor(connection: Connection, name: string) {\n    this.name = name;\n    this._connection = connection;\n  }\n\n  get() {\n    return this._connection.request(\n      { path: `/_api/gharial/${this.name}` },\n      res => res.body.graph\n    );\n  }\n\n  exists(): Promise<boolean> {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === GRAPH_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  create(properties: any = {}, opts?: { waitForSync?: boolean }) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/gharial\",\n        body: {\n          ...properties,\n          name: this.name\n        },\n        qs: opts\n      },\n      res => res.body.graph\n    );\n  }\n\n  drop(dropCollections: boolean = false) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.name}`,\n        qs: { dropCollections }\n      },\n      res => res.body.removed\n    );\n  }\n\n  vertexCollection(collectionName: string) {\n    return new GraphVertexCollection(this._connection, collectionName, this);\n  }\n\n  listVertexCollections(opts?: { excludeOrphans?: boolean }) {\n    return this._connection.request(\n      { path: `/_api/gharial/${this.name}/vertex`, qs: opts },\n      res => res.body.collections\n    );\n  }\n\n  async vertexCollections(opts?: { excludeOrphans?: boolean }) {\n    const names = await this.listVertexCollections(opts);\n    return names.map(\n      (name: any) => new GraphVertexCollection(this._connection, name, this)\n    );\n  }\n\n  addVertexCollection(collection: string | ArangoCollection) {\n    if (isArangoCollection(collection)) {\n      collection = collection.name;\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${this.name}/vertex`,\n        body: { collection }\n      },\n      res => res.body.graph\n    );\n  }\n\n  removeVertexCollection(\n    collection: string | ArangoCollection,\n    dropCollection: boolean = false\n  ) {\n    if (isArangoCollection(collection)) {\n      collection = collection.name;\n    }\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.name}/vertex/${collection}`,\n        qs: {\n          dropCollection\n        }\n      },\n      res => res.body.graph\n    );\n  }\n\n  edgeCollection(collectionName: string) {\n    return new GraphEdgeCollection(this._connection, collectionName, this);\n  }\n\n  listEdgeCollections() {\n    return this._connection.request(\n      { path: `/_api/gharial/${this.name}/edge` },\n      res => res.body.collections\n    );\n  }\n\n  async edgeCollections() {\n    const names = await this.listEdgeCollections();\n    return names.map(\n      (name: any) => new GraphEdgeCollection(this._connection, name, this)\n    );\n  }\n\n  addEdgeDefinition(definition: any) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/gharial/${this.name}/edge`,\n        body: definition\n      },\n      res => res.body.graph\n    );\n  }\n\n  replaceEdgeDefinition(definitionName: string, definition: any) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/gharial/${this.name}/edge/${definitionName}`,\n        body: definition\n      },\n      res => res.body.graph\n    );\n  }\n\n  removeEdgeDefinition(\n    definitionName: string,\n    dropCollection: boolean = false\n  ) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/gharial/${this.name}/edge/${definitionName}`,\n        qs: {\n          dropCollection\n        }\n      },\n      res => res.body.graph\n    );\n  }\n\n  traversal(startVertex: DocumentHandle, opts: any) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/traversal`,\n        body: {\n          ...opts,\n          startVertex,\n          graphName: this.name\n        }\n      },\n      res => res.body.result\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}