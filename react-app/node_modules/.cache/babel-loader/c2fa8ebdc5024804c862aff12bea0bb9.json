{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst collection_1 = require(\"./collection\");\n\nfunction isAqlQuery(query) {\n  return Boolean(query && typeof query.query === \"string\" && query.bindVars);\n}\n\nexports.isAqlQuery = isAqlQuery;\n\nfunction isGeneratedAqlQuery(query) {\n  return isAqlQuery(query) && typeof query._source === \"function\";\n}\n\nexports.isGeneratedAqlQuery = isGeneratedAqlQuery;\n\nfunction isAqlLiteral(literal) {\n  return Boolean(literal && typeof literal.toAQL === \"function\");\n}\n\nexports.isAqlLiteral = isAqlLiteral;\n\nfunction aql(templateStrings, ...args) {\n  const strings = [...templateStrings];\n  const bindVars = {};\n  const bindVals = [];\n  let query = strings[0];\n\n  for (let i = 0; i < args.length; i++) {\n    const rawValue = args[i];\n    let value = rawValue;\n\n    if (isGeneratedAqlQuery(rawValue)) {\n      const src = rawValue._source();\n\n      if (src.args.length) {\n        query += src.strings[0];\n        args.splice(i, 1, ...src.args);\n        strings.splice(i, 2, strings[i] + src.strings[0], ...src.strings.slice(1, src.args.length), src.strings[src.args.length] + strings[i + 1]);\n      } else {\n        query += rawValue.query + strings[i + 1];\n        args.splice(i, 1);\n        strings.splice(i, 2, strings[i] + rawValue.query + strings[i + 1]);\n      }\n\n      i -= 1;\n      continue;\n    }\n\n    if (rawValue === undefined) {\n      query += strings[i + 1];\n      continue;\n    }\n\n    if (isAqlLiteral(rawValue)) {\n      query += `${rawValue.toAQL()}${strings[i + 1]}`;\n      continue;\n    }\n\n    const index = bindVals.indexOf(rawValue);\n    const isKnown = index !== -1;\n    let name = `value${isKnown ? index : bindVals.length}`;\n\n    if (collection_1.isArangoCollection(rawValue)) {\n      name = `@${name}`;\n      value = rawValue.name;\n    }\n\n    if (!isKnown) {\n      bindVals.push(rawValue);\n      bindVars[name] = value;\n    }\n\n    query += `@${name}${strings[i + 1]}`;\n  }\n\n  return {\n    query,\n    bindVars,\n    _source: () => ({\n      strings,\n      args\n    })\n  };\n}\n\nexports.aql = aql;\n\n(function (aql) {\n  aql.literal = value => {\n    if (isAqlLiteral(value)) {\n      return value;\n    }\n\n    return {\n      toAQL() {\n        if (value === undefined) {\n          return \"\";\n        }\n\n        return String(value);\n      }\n\n    };\n  };\n\n  aql.join = (values, sep = \" \") => {\n    if (!values.length) {\n      return aql``;\n    }\n\n    if (values.length === 1) {\n      return aql`${values[0]}`;\n    }\n\n    return aql([\"\", ...Array(values.length - 1).fill(sep), \"\"], ...values);\n  };\n})(aql = exports.aql || (exports.aql = {}));","map":{"version":3,"sources":["../../src/aql-query.ts"],"names":[],"mappings":"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","sourcesContent":["import { ArangoCollection, isArangoCollection } from \"./collection\";\n\nexport interface AqlQuery {\n  query: string;\n  bindVars: { [key: string]: any };\n}\n\nexport interface GeneratedAqlQuery extends AqlQuery {\n  _source: () => { strings: string[]; args: AqlValue[] };\n}\n\nexport interface AqlLiteral {\n  toAQL: () => string;\n}\n\nexport type AqlValue =\n  | ArangoCollection\n  | GeneratedAqlQuery\n  | AqlLiteral\n  | string\n  | number\n  | boolean\n  | null\n  | undefined\n  | object\n  | any[];\n\nexport function isAqlQuery(query: any): query is AqlQuery {\n  return Boolean(query && typeof query.query === \"string\" && query.bindVars);\n}\n\nexport function isGeneratedAqlQuery(query: any): query is GeneratedAqlQuery {\n  return isAqlQuery(query) && typeof (query as any)._source === \"function\";\n}\n\nexport function isAqlLiteral(literal: any): literal is AqlLiteral {\n  return Boolean(literal && typeof literal.toAQL === \"function\");\n}\n\nexport function aql(\n  templateStrings: TemplateStringsArray,\n  ...args: AqlValue[]\n): GeneratedAqlQuery {\n  const strings = [...templateStrings];\n  const bindVars: AqlQuery[\"bindVars\"] = {};\n  const bindVals = [];\n  let query = strings[0];\n  for (let i = 0; i < args.length; i++) {\n    const rawValue = args[i];\n    let value = rawValue;\n    if (isGeneratedAqlQuery(rawValue)) {\n      const src = rawValue._source();\n      if (src.args.length) {\n        query += src.strings[0];\n        args.splice(i, 1, ...src.args);\n        strings.splice(\n          i,\n          2,\n          strings[i] + src.strings[0],\n          ...src.strings.slice(1, src.args.length),\n          src.strings[src.args.length] + strings[i + 1]\n        );\n      } else {\n        query += rawValue.query + strings[i + 1];\n        args.splice(i, 1);\n        strings.splice(i, 2, strings[i] + rawValue.query + strings[i + 1]);\n      }\n      i -= 1;\n      continue;\n    }\n    if (rawValue === undefined) {\n      query += strings[i + 1];\n      continue;\n    }\n    if (isAqlLiteral(rawValue)) {\n      query += `${rawValue.toAQL()}${strings[i + 1]}`;\n      continue;\n    }\n    const index = bindVals.indexOf(rawValue);\n    const isKnown = index !== -1;\n    let name = `value${isKnown ? index : bindVals.length}`;\n    if (isArangoCollection(rawValue)) {\n      name = `@${name}`;\n      value = rawValue.name;\n    }\n    if (!isKnown) {\n      bindVals.push(rawValue);\n      bindVars[name] = value;\n    }\n    query += `@${name}${strings[i + 1]}`;\n  }\n  return {\n    query,\n    bindVars,\n    _source: () => ({ strings, args })\n  };\n}\n\nexport namespace aql {\n  export const literal = (\n    value: string | number | boolean | AqlLiteral | null | undefined\n  ): AqlLiteral => {\n    if (isAqlLiteral(value)) {\n      return value;\n    }\n    return {\n      toAQL() {\n        if (value === undefined) {\n          return \"\";\n        }\n        return String(value);\n      }\n    };\n  };\n  export const join = (\n    values: AqlValue[],\n    sep: string = \" \"\n  ): GeneratedAqlQuery => {\n    if (!values.length) {\n      return aql``;\n    }\n    if (values.length === 1) {\n      return aql`${values[0]}`;\n    }\n    return aql(\n      [\"\", ...Array(values.length - 1).fill(sep), \"\"] as any,\n      ...values\n    );\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}