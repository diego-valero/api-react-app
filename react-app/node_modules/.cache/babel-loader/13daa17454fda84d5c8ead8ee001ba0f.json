{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst querystring_1 = require(\"querystring\");\n\nconst error_1 = require(\"./error\");\n\nconst request_1 = require(\"./util/request\");\n\nconst sanitizeUrl_1 = require(\"./util/sanitizeUrl\");\n\nconst x3_linkedlist_1 = require(\"x3-linkedlist\");\n\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\n\nfunction isSystemError(err) {\n  return Object.getPrototypeOf(err) === Error.prototype && err.hasOwnProperty(\"code\") && err.hasOwnProperty(\"errno\") && err.hasOwnProperty(\"syscall\");\n}\n\nfunction clean(obj) {\n  const result = {};\n\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    if (value === undefined) continue;\n    result[key] = value;\n  }\n\n  return result;\n}\n\nclass Connection {\n  constructor(config = {}) {\n    this._activeTasks = 0;\n    this._arangoVersion = 30000;\n    this._databaseName = \"_system\";\n    this._queue = new x3_linkedlist_1.LinkedList();\n    this._hosts = [];\n    this._urls = [];\n    this._transactionId = null;\n    if (typeof config === \"string\") config = {\n      url: config\n    };else if (Array.isArray(config)) config = {\n      url: config\n    };\n\n    if (config.arangoVersion !== undefined) {\n      this._arangoVersion = config.arangoVersion;\n    }\n\n    if (config.isAbsolute) {\n      this._databaseName = false;\n    }\n\n    this._agent = config.agent;\n    this._agentOptions = request_1.isBrowser ? Object.assign({}, config.agentOptions) : Object.assign({\n      maxSockets: 3,\n      keepAlive: true,\n      keepAliveMsecs: 1000\n    }, config.agentOptions);\n    this._maxTasks = this._agentOptions.maxSockets || 3;\n    if (this._agentOptions.keepAlive) this._maxTasks *= 2;\n    this._headers = Object.assign({}, config.headers);\n    this._loadBalancingStrategy = config.loadBalancingStrategy || \"NONE\";\n    this._useFailOver = this._loadBalancingStrategy !== \"ROUND_ROBIN\";\n\n    if (config.maxRetries === false) {\n      this._shouldRetry = false;\n      this._maxRetries = 0;\n    } else {\n      this._shouldRetry = true;\n      this._maxRetries = config.maxRetries || 0;\n    }\n\n    const urls = config.url ? Array.isArray(config.url) ? config.url : [config.url] : [\"http://localhost:8529\"];\n    this.addToHostList(urls);\n\n    if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n      this._activeHost = Math.floor(Math.random() * this._hosts.length);\n      this._activeDirtyHost = Math.floor(Math.random() * this._hosts.length);\n    } else {\n      this._activeHost = 0;\n      this._activeDirtyHost = 0;\n    }\n  }\n\n  get _databasePath() {\n    return this._databaseName === false ? \"\" : `/_db/${this._databaseName}`;\n  }\n\n  _runQueue() {\n    if (!this._queue.length || this._activeTasks >= this._maxTasks) return;\n\n    const task = this._queue.shift();\n\n    let host = this._activeHost;\n\n    if (task.host !== undefined) {\n      host = task.host;\n    } else if (task.allowDirtyRead) {\n      host = this._activeDirtyHost;\n      this._activeDirtyHost = (this._activeDirtyHost + 1) % this._hosts.length;\n      task.options.headers[\"x-arango-allow-dirty-read\"] = \"true\";\n    } else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n      this._activeHost = (this._activeHost + 1) % this._hosts.length;\n    }\n\n    this._activeTasks += 1;\n\n    const callback = (err, res) => {\n      this._activeTasks -= 1;\n\n      if (err) {\n        if (!task.allowDirtyRead && this._hosts.length > 1 && this._activeHost === host && this._useFailOver) {\n          this._activeHost = (this._activeHost + 1) % this._hosts.length;\n        }\n\n        if (!task.host && this._shouldRetry && task.retries < (this._maxRetries || this._hosts.length - 1) && isSystemError(err) && err.syscall === \"connect\" && err.code === \"ECONNREFUSED\") {\n          task.retries += 1;\n\n          this._queue.push(task);\n        } else {\n          task.reject(err);\n        }\n      } else {\n        const response = res;\n\n        if (response.statusCode === 503 && response.headers[LEADER_ENDPOINT_HEADER]) {\n          const url = response.headers[LEADER_ENDPOINT_HEADER];\n          const [index] = this.addToHostList(url);\n          task.host = index;\n\n          if (this._activeHost === host) {\n            this._activeHost = index;\n          }\n\n          this._queue.push(task);\n        } else {\n          response.arangojsHostId = host;\n          task.resolve(response);\n        }\n      }\n\n      this._runQueue();\n    };\n\n    try {\n      this._hosts[host](task.options, callback);\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n  _buildUrl({\n    absolutePath = false,\n    basePath,\n    path,\n    qs\n  }) {\n    let pathname = \"\";\n    let search;\n\n    if (!absolutePath) {\n      pathname = this._databasePath;\n      if (basePath) pathname += basePath;\n    }\n\n    if (path) pathname += path;\n\n    if (qs) {\n      if (typeof qs === \"string\") search = `?${qs}`;else search = `?${querystring_1.stringify(clean(qs))}`;\n    }\n\n    return search ? {\n      pathname,\n      search\n    } : {\n      pathname\n    };\n  }\n\n  addToHostList(urls) {\n    const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map(url => sanitizeUrl_1.sanitizeUrl(url));\n    const newUrls = cleanUrls.filter(url => this._urls.indexOf(url) === -1);\n\n    this._urls.push(...newUrls);\n\n    this._hosts.push(...newUrls.map(url => request_1.createRequest(url, this._agentOptions, this._agent)));\n\n    return cleanUrls.map(url => this._urls.indexOf(url));\n  }\n\n  get arangoMajor() {\n    return Math.floor(this._arangoVersion / 10000);\n  }\n\n  getDatabaseName() {\n    return this._databaseName;\n  }\n\n  getActiveHost() {\n    return this._activeHost;\n  }\n\n  setDatabaseName(databaseName) {\n    if (this._databaseName === false) {\n      throw new Error(\"Can not change database from absolute URL\");\n    }\n\n    this._databaseName = databaseName;\n  }\n\n  setTransactionId(transactionId) {\n    this._transactionId = transactionId;\n  }\n\n  clearTransactionId() {\n    this._transactionId = null;\n  }\n\n  setHeader(key, value) {\n    this._headers[key] = value;\n  }\n\n  close() {\n    for (const host of this._hosts) {\n      if (host.close) host.close();\n    }\n  }\n\n  request(_a, getter) {\n    var {\n      host,\n      method = \"GET\",\n      body,\n      expectBinary = false,\n      isBinary = false,\n      allowDirtyRead = false,\n      timeout = 0,\n      headers\n    } = _a,\n        urlInfo = __rest(_a, [\"host\", \"method\", \"body\", \"expectBinary\", \"isBinary\", \"allowDirtyRead\", \"timeout\", \"headers\"]);\n\n    return new Promise((resolve, reject) => {\n      let contentType = \"text/plain\";\n\n      if (isBinary) {\n        contentType = \"application/octet-stream\";\n      } else if (body) {\n        if (typeof body === \"object\") {\n          body = JSON.stringify(body);\n          contentType = \"application/json\";\n        } else {\n          body = String(body);\n        }\n      }\n\n      const extraHeaders = Object.assign({}, this._headers, {\n        \"content-type\": contentType,\n        \"x-arango-version\": String(this._arangoVersion)\n      });\n\n      if (this._transactionId) {\n        extraHeaders[\"x-arango-trx-id\"] = this._transactionId;\n      }\n\n      this._queue.push({\n        retries: 0,\n        host,\n        allowDirtyRead,\n        options: {\n          url: this._buildUrl(urlInfo),\n          headers: Object.assign({}, extraHeaders, headers),\n          timeout,\n          method,\n          expectBinary,\n          body\n        },\n        reject,\n        resolve: res => {\n          const contentType = res.headers[\"content-type\"];\n          let parsedBody = undefined;\n\n          if (res.body.length && contentType && contentType.match(MIME_JSON)) {\n            try {\n              parsedBody = res.body;\n              parsedBody = JSON.parse(parsedBody);\n            } catch (e) {\n              if (!expectBinary) {\n                if (typeof parsedBody !== \"string\") {\n                  parsedBody = res.body.toString(\"utf-8\");\n                }\n\n                e.response = res;\n                reject(e);\n                return;\n              }\n            }\n          } else if (res.body && !expectBinary) {\n            parsedBody = res.body.toString(\"utf-8\");\n          } else {\n            parsedBody = res.body;\n          }\n\n          if (parsedBody && parsedBody.hasOwnProperty(\"error\") && parsedBody.hasOwnProperty(\"code\") && parsedBody.hasOwnProperty(\"errorMessage\") && parsedBody.hasOwnProperty(\"errorNum\")) {\n            res.body = parsedBody;\n            reject(new error_1.ArangoError(res));\n          } else if (res.statusCode && res.statusCode >= 400) {\n            res.body = parsedBody;\n            reject(new error_1.HttpError(res));\n          } else {\n            if (!expectBinary) res.body = parsedBody;\n            resolve(getter ? getter(res) : res);\n          }\n        }\n      });\n\n      this._runQueue();\n    });\n  }\n\n}\n\nexports.Connection = Connection;","map":{"version":3,"sources":["../../src/connection.ts"],"names":[],"mappings":"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","sourcesContent":["import { stringify as querystringify } from \"querystring\";\nimport { ArangoError, HttpError } from \"./error\";\nimport {\n  ArangojsResponse,\n  createRequest,\n  isBrowser,\n  RequestFunction\n} from \"./util/request\";\nimport { sanitizeUrl } from \"./util/sanitizeUrl\";\nimport { Errback } from \"./util/types\";\nimport { LinkedList } from \"x3-linkedlist\";\n\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\n\nexport type LoadBalancingStrategy = \"NONE\" | \"ROUND_ROBIN\" | \"ONE_RANDOM\";\n\ninterface SystemError extends Error {\n  code: string;\n  errno: number | string;\n  syscall: string;\n}\n\nfunction isSystemError(err: Error): err is SystemError {\n  return (\n    Object.getPrototypeOf(err) === Error.prototype &&\n    err.hasOwnProperty(\"code\") &&\n    err.hasOwnProperty(\"errno\") &&\n    err.hasOwnProperty(\"syscall\")\n  );\n}\n\nfunction clean<T>(obj: T) {\n  const result = {} as typeof obj;\n  for (const key of Object.keys(obj)) {\n    const value = (obj as any)[key];\n    if (value === undefined) continue;\n    (result as any)[key] = value;\n  }\n  return result;\n}\n\ntype UrlInfo = {\n  absolutePath?: boolean;\n  basePath?: string;\n  path?: string;\n  qs?: string | { [key: string]: any };\n};\n\nexport type RequestOptions = {\n  host?: number;\n  method?: string;\n  body?: any;\n  expectBinary?: boolean;\n  isBinary?: boolean;\n  allowDirtyRead?: boolean;\n  headers?: { [key: string]: string };\n  timeout?: number;\n  absolutePath?: boolean;\n  basePath?: string;\n  path?: string;\n  qs?: string | { [key: string]: any };\n};\n\ntype Task = {\n  host?: number;\n  allowDirtyRead: boolean;\n  resolve: Function;\n  reject: Function;\n  retries: number;\n  options: {\n    method: string;\n    expectBinary: boolean;\n    timeout?: number;\n    url: { pathname: string; search?: string };\n    headers: { [key: string]: string };\n    body: any;\n  };\n};\n\nexport type Config =\n  | string\n  | string[]\n  | Partial<{\n      url: string | string[];\n      isAbsolute: boolean;\n      arangoVersion: number;\n      loadBalancingStrategy: LoadBalancingStrategy;\n      maxRetries: false | number;\n      agent: any;\n      agentOptions: { [key: string]: any };\n      headers: { [key: string]: string };\n    }>;\n\nexport class Connection {\n  private _activeTasks: number = 0;\n  private _agent?: any;\n  private _agentOptions: { [key: string]: any };\n  private _arangoVersion: number = 30000;\n  private _databaseName: string | false = \"_system\";\n  private _headers: { [key: string]: string };\n  private _loadBalancingStrategy: LoadBalancingStrategy;\n  private _useFailOver: boolean;\n  private _shouldRetry: boolean;\n  private _maxRetries: number;\n  private _maxTasks: number;\n  private _queue = new LinkedList<Task>();\n  private _hosts: RequestFunction[] = [];\n  private _urls: string[] = [];\n  private _activeHost: number;\n  private _activeDirtyHost: number;\n  private _transactionId: string | null = null;\n\n  constructor(config: Config = {}) {\n    if (typeof config === \"string\") config = { url: config };\n    else if (Array.isArray(config)) config = { url: config };\n\n    if (config.arangoVersion !== undefined) {\n      this._arangoVersion = config.arangoVersion;\n    }\n    if (config.isAbsolute) {\n      this._databaseName = false;\n    }\n    this._agent = config.agent;\n    this._agentOptions = isBrowser\n      ? { ...config.agentOptions! }\n      : {\n          maxSockets: 3,\n          keepAlive: true,\n          keepAliveMsecs: 1000,\n          ...config.agentOptions\n        };\n    this._maxTasks = this._agentOptions.maxSockets || 3;\n    if (this._agentOptions.keepAlive) this._maxTasks *= 2;\n\n    this._headers = { ...config.headers };\n    this._loadBalancingStrategy = config.loadBalancingStrategy || \"NONE\";\n    this._useFailOver = this._loadBalancingStrategy !== \"ROUND_ROBIN\";\n    if (config.maxRetries === false) {\n      this._shouldRetry = false;\n      this._maxRetries = 0;\n    } else {\n      this._shouldRetry = true;\n      this._maxRetries = config.maxRetries || 0;\n    }\n\n    const urls = config.url\n      ? Array.isArray(config.url)\n        ? config.url\n        : [config.url]\n      : [\"http://localhost:8529\"];\n    this.addToHostList(urls);\n\n    if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n      this._activeHost = Math.floor(Math.random() * this._hosts.length);\n      this._activeDirtyHost = Math.floor(Math.random() * this._hosts.length);\n    } else {\n      this._activeHost = 0;\n      this._activeDirtyHost = 0;\n    }\n  }\n\n  private get _databasePath() {\n    return this._databaseName === false ? \"\" : `/_db/${this._databaseName}`;\n  }\n\n  private _runQueue() {\n    if (!this._queue.length || this._activeTasks >= this._maxTasks) return;\n    const task = this._queue.shift()!;\n    let host = this._activeHost;\n    if (task.host !== undefined) {\n      host = task.host;\n    } else if (task.allowDirtyRead) {\n      host = this._activeDirtyHost;\n      this._activeDirtyHost = (this._activeDirtyHost + 1) % this._hosts.length;\n      task.options.headers[\"x-arango-allow-dirty-read\"] = \"true\";\n    } else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n      this._activeHost = (this._activeHost + 1) % this._hosts.length;\n    }\n    this._activeTasks += 1;\n    const callback: Errback<ArangojsResponse> = (err, res) => {\n      this._activeTasks -= 1;\n      if (err) {\n        if (\n          !task.allowDirtyRead &&\n          this._hosts.length > 1 &&\n          this._activeHost === host &&\n          this._useFailOver\n        ) {\n          this._activeHost = (this._activeHost + 1) % this._hosts.length;\n        }\n        if (\n          !task.host &&\n          this._shouldRetry &&\n          task.retries < (this._maxRetries || this._hosts.length - 1) &&\n          isSystemError(err) &&\n          err.syscall === \"connect\" &&\n          err.code === \"ECONNREFUSED\"\n        ) {\n          task.retries += 1;\n          this._queue.push(task);\n        } else {\n          task.reject(err);\n        }\n      } else {\n        const response = res!;\n        if (\n          response.statusCode === 503 &&\n          response.headers[LEADER_ENDPOINT_HEADER]\n        ) {\n          const url = response.headers[LEADER_ENDPOINT_HEADER]!;\n          const [index] = this.addToHostList(url);\n          task.host = index;\n          if (this._activeHost === host) {\n            this._activeHost = index;\n          }\n          this._queue.push(task);\n        } else {\n          response.arangojsHostId = host;\n          task.resolve(response);\n        }\n      }\n      this._runQueue();\n    };\n    try {\n      this._hosts[host](task.options, callback);\n    } catch (e) {\n      callback(e);\n    }\n  }\n\n  private _buildUrl({ absolutePath = false, basePath, path, qs }: UrlInfo) {\n    let pathname = \"\";\n    let search;\n    if (!absolutePath) {\n      pathname = this._databasePath;\n      if (basePath) pathname += basePath;\n    }\n    if (path) pathname += path;\n    if (qs) {\n      if (typeof qs === \"string\") search = `?${qs}`;\n      else search = `?${querystringify(clean(qs))}`;\n    }\n    return search ? { pathname, search } : { pathname };\n  }\n\n  addToHostList(urls: string | string[]): number[] {\n    const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map(url =>\n      sanitizeUrl(url)\n    );\n    const newUrls = cleanUrls.filter(url => this._urls.indexOf(url) === -1);\n    this._urls.push(...newUrls);\n    this._hosts.push(\n      ...newUrls.map((url: string) =>\n        createRequest(url, this._agentOptions, this._agent)\n      )\n    );\n    return cleanUrls.map(url => this._urls.indexOf(url));\n  }\n\n  get arangoMajor() {\n    return Math.floor(this._arangoVersion / 10000);\n  }\n\n  getDatabaseName() {\n    return this._databaseName;\n  }\n\n  getActiveHost() {\n    return this._activeHost;\n  }\n\n  setDatabaseName(databaseName: string) {\n    if (this._databaseName === false) {\n      throw new Error(\"Can not change database from absolute URL\");\n    }\n    this._databaseName = databaseName;\n  }\n\n  setTransactionId(transactionId: string) {\n    this._transactionId = transactionId;\n  }\n\n  clearTransactionId() {\n    this._transactionId = null;\n  }\n\n  setHeader(key: string, value: string) {\n    this._headers[key] = value;\n  }\n\n  close() {\n    for (const host of this._hosts) {\n      if (host.close) host.close();\n    }\n  }\n\n  request<T = ArangojsResponse>(\n    {\n      host,\n      method = \"GET\",\n      body,\n      expectBinary = false,\n      isBinary = false,\n      allowDirtyRead = false,\n      timeout = 0,\n      headers,\n      ...urlInfo\n    }: RequestOptions,\n    getter?: (res: ArangojsResponse) => T\n  ): Promise<T> {\n    return new Promise((resolve, reject) => {\n      let contentType = \"text/plain\";\n      if (isBinary) {\n        contentType = \"application/octet-stream\";\n      } else if (body) {\n        if (typeof body === \"object\") {\n          body = JSON.stringify(body);\n          contentType = \"application/json\";\n        } else {\n          body = String(body);\n        }\n      }\n\n      const extraHeaders: { [key: string]: string } = {\n        ...this._headers,\n        \"content-type\": contentType,\n        \"x-arango-version\": String(this._arangoVersion)\n      };\n\n      if (this._transactionId) {\n        extraHeaders[\"x-arango-trx-id\"] = this._transactionId;\n      }\n\n      this._queue.push({\n        retries: 0,\n        host,\n        allowDirtyRead,\n        options: {\n          url: this._buildUrl(urlInfo),\n          headers: { ...extraHeaders, ...headers },\n          timeout,\n          method,\n          expectBinary,\n          body\n        },\n        reject,\n        resolve: (res: ArangojsResponse) => {\n          const contentType = res.headers[\"content-type\"];\n          let parsedBody: any = undefined;\n          if (res.body.length && contentType && contentType.match(MIME_JSON)) {\n            try {\n              parsedBody = res.body;\n              parsedBody = JSON.parse(parsedBody);\n            } catch (e) {\n              if (!expectBinary) {\n                if (typeof parsedBody !== \"string\") {\n                  parsedBody = res.body.toString(\"utf-8\");\n                }\n                e.response = res;\n                reject(e);\n                return;\n              }\n            }\n          } else if (res.body && !expectBinary) {\n            parsedBody = res.body.toString(\"utf-8\");\n          } else {\n            parsedBody = res.body;\n          }\n          if (\n            parsedBody &&\n            parsedBody.hasOwnProperty(\"error\") &&\n            parsedBody.hasOwnProperty(\"code\") &&\n            parsedBody.hasOwnProperty(\"errorMessage\") &&\n            parsedBody.hasOwnProperty(\"errorNum\")\n          ) {\n            res.body = parsedBody;\n            reject(new ArangoError(res));\n          } else if (res.statusCode && res.statusCode >= 400) {\n            res.body = parsedBody;\n            reject(new HttpError(res));\n          } else {\n            if (!expectBinary) res.body = parsedBody;\n            resolve(getter ? getter(res) : (res as any));\n          }\n        }\n      });\n      this._runQueue();\n    });\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}