{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst cursor_1 = require(\"./cursor\");\n\nconst error_1 = require(\"./error\");\n\nvar CollectionType;\n\n(function (CollectionType) {\n  CollectionType[CollectionType[\"DOCUMENT_COLLECTION\"] = 2] = \"DOCUMENT_COLLECTION\";\n  CollectionType[CollectionType[\"EDGE_COLLECTION\"] = 3] = \"EDGE_COLLECTION\";\n})(CollectionType = exports.CollectionType || (exports.CollectionType = {}));\n\nfunction isArangoCollection(collection) {\n  return Boolean(collection && collection.isArangoCollection);\n}\n\nexports.isArangoCollection = isArangoCollection;\nexports.DOCUMENT_NOT_FOUND = 1202;\nexports.COLLECTION_NOT_FOUND = 1203;\n\nclass BaseCollection {\n  constructor(connection, name) {\n    this.isArangoCollection = true;\n    this.name = name;\n    this._idPrefix = `${this.name}/`;\n    this._connection = connection;\n\n    if (this._connection.arangoMajor >= 3) {\n      this.first = undefined;\n      this.last = undefined;\n      this.createCapConstraint = undefined;\n    }\n  }\n\n  _documentPath(documentHandle) {\n    return `/document/${this._documentHandle(documentHandle)}`;\n  }\n\n  _documentHandle(documentHandle) {\n    if (typeof documentHandle !== \"string\") {\n      if (documentHandle._id) {\n        return documentHandle._id;\n      }\n\n      if (documentHandle._key) {\n        return this._idPrefix + documentHandle._key;\n      }\n\n      throw new Error(\"Document handle must be a document or string\");\n    }\n\n    if (documentHandle.indexOf(\"/\") === -1) {\n      return this._idPrefix + documentHandle;\n    }\n\n    return documentHandle;\n  }\n\n  _indexHandle(indexHandle) {\n    if (typeof indexHandle !== \"string\") {\n      if (indexHandle.id) {\n        return indexHandle.id;\n      }\n\n      throw new Error(\"Index handle must be a index or string\");\n    }\n\n    if (indexHandle.indexOf(\"/\") === -1) {\n      return this._idPrefix + indexHandle;\n    }\n\n    return indexHandle;\n  }\n\n  _get(path, qs) {\n    return this._connection.request({\n      path: `/_api/collection/${this.name}/${path}`,\n      qs\n    }, res => res.body);\n  }\n\n  _put(path, body) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: `/_api/collection/${this.name}/${path}`,\n      body\n    }, res => res.body);\n  }\n\n  get() {\n    return this._connection.request({\n      path: `/_api/collection/${this.name}`\n    }, res => res.body);\n  }\n\n  exists() {\n    return this.get().then(() => true, err => {\n      if (error_1.isArangoError(err) && err.errorNum === exports.COLLECTION_NOT_FOUND) {\n        return false;\n      }\n\n      throw err;\n    });\n  }\n\n  create(properties) {\n    const _a = properties || {},\n          {\n      waitForSyncReplication = undefined,\n      enforceReplicationFactor = undefined\n    } = _a,\n          options = __rest(_a, [\"waitForSyncReplication\", \"enforceReplicationFactor\"]);\n\n    const qs = {};\n\n    if (typeof waitForSyncReplication === \"boolean\") {\n      qs.waitForSyncReplication = waitForSyncReplication ? 1 : 0;\n    }\n\n    if (typeof enforceReplicationFactor === \"boolean\") {\n      qs.enforceReplicationFactor = enforceReplicationFactor ? 1 : 0;\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/collection\",\n      qs,\n      body: Object.assign({}, options, {\n        name: this.name,\n        type: this.type\n      })\n    }, res => res.body);\n  }\n\n  properties() {\n    return this._get(\"properties\");\n  }\n\n  count() {\n    return this._get(\"count\");\n  }\n\n  figures() {\n    return this._get(\"figures\");\n  }\n\n  revision() {\n    return this._get(\"revision\");\n  }\n\n  checksum(opts) {\n    return this._get(\"checksum\", opts);\n  }\n\n  load(count) {\n    return this._put(\"load\", typeof count === \"boolean\" ? {\n      count: count\n    } : undefined);\n  }\n\n  unload() {\n    return this._put(\"unload\", undefined);\n  }\n\n  setProperties(properties) {\n    return this._put(\"properties\", properties);\n  }\n\n  rename(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._connection.request({\n        method: \"PUT\",\n        path: `/_api/collection/${this.name}/rename`,\n        body: {\n          name\n        }\n      }, res => res.body);\n      this.name = name;\n      this._idPrefix = `${name}/`;\n      return result;\n    });\n  }\n\n  rotate() {\n    return this._put(\"rotate\", undefined);\n  }\n\n  truncate() {\n    return this._put(\"truncate\", undefined);\n  }\n\n  drop(opts) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/collection/${this.name}`,\n      qs: opts\n    }, res => res.body);\n  }\n\n  getResponsibleShard(document) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: `/_api/collection/${this.name}/responsibleShard`,\n      body: document\n    }, res => res.body.shardId);\n  }\n\n  documentExists(documentHandle) {\n    return this._connection.request({\n      method: \"HEAD\",\n      path: `/_api/${this._documentPath(documentHandle)}`\n    }, () => true).catch(err => {\n      if (err.statusCode === 404) {\n        return false;\n      }\n\n      throw err;\n    });\n  }\n\n  document(documentHandle, opts = {}) {\n    if (typeof opts === \"boolean\") {\n      opts = {\n        graceful: opts\n      };\n    }\n\n    const {\n      allowDirtyRead = undefined,\n      graceful = false\n    } = opts;\n\n    const result = this._connection.request({\n      path: `/_api/${this._documentPath(documentHandle)}`,\n      allowDirtyRead\n    }, res => res.body);\n\n    if (!graceful) return result;\n    return result.catch(err => {\n      if (error_1.isArangoError(err) && err.errorNum === exports.DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n\n      throw err;\n    });\n  }\n\n  replace(documentHandle, newValue, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev && this._connection.arangoMajor >= 3) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"PUT\",\n      path: `/_api/${this._documentPath(documentHandle)}`,\n      body: newValue,\n      qs: opts,\n      headers\n    }, res => res.body);\n  }\n\n  update(documentHandle, newValue, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev && this._connection.arangoMajor >= 3) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"PATCH\",\n      path: `/_api/${this._documentPath(documentHandle)}`,\n      body: newValue,\n      qs: opts,\n      headers\n    }, res => res.body);\n  }\n\n  bulkUpdate(newValues, opts) {\n    return this._connection.request({\n      method: \"PATCH\",\n      path: `/_api/document/${this.name}`,\n      body: newValues,\n      qs: opts\n    }, res => res.body);\n  }\n\n  remove(documentHandle, opts = {}) {\n    var _a;\n\n    const headers = {};\n\n    if (typeof opts === \"string\") {\n      opts = {\n        rev: opts\n      };\n    }\n\n    if (opts.rev && this._connection.arangoMajor >= 3) {\n      let rev;\n      _a = opts, ({\n        rev\n      } = _a), opts = __rest(_a, [\"rev\"]);\n      headers[\"if-match\"] = rev;\n    }\n\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/${this._documentPath(documentHandle)}`,\n      qs: opts,\n      headers\n    }, res => res.body);\n  }\n\n  list(type = \"id\") {\n    if (this._connection.arangoMajor <= 2) {\n      return this._connection.request({\n        path: \"/_api/document\",\n        qs: {\n          type,\n          collection: this.name\n        }\n      }, res => res.body.documents);\n    }\n\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/all-keys\",\n      body: {\n        type,\n        collection: this.name\n      }\n    }, res => res.body.result);\n  }\n\n  all(opts) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/all\",\n      body: Object.assign({}, opts, {\n        collection: this.name\n      })\n    }, res => new cursor_1.ArrayCursor(this._connection, res.body, res.arangojsHostId));\n  }\n\n  any() {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/any\",\n      body: {\n        collection: this.name\n      }\n    }, res => res.body.document);\n  }\n\n  first(opts) {\n    if (typeof opts === \"number\") {\n      opts = {\n        count: opts\n      };\n    }\n\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/first\",\n      body: Object.assign({}, opts, {\n        collection: this.name\n      })\n    }, res => res.body.result);\n  }\n\n  last(opts) {\n    if (typeof opts === \"number\") {\n      opts = {\n        count: opts\n      };\n    }\n\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/last\",\n      body: Object.assign({}, opts, {\n        collection: this.name\n      })\n    }, res => res.body.result);\n  }\n\n  byExample(example, opts) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/by-example\",\n      body: Object.assign({}, opts, {\n        example,\n        collection: this.name\n      })\n    }, res => new cursor_1.ArrayCursor(this._connection, res.body, res.arangojsHostId));\n  }\n\n  firstExample(example) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/first-example\",\n      body: {\n        example,\n        collection: this.name\n      }\n    }, res => res.body.document);\n  }\n\n  removeByExample(example, opts) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/remove-by-example\",\n      body: Object.assign({}, opts, {\n        example,\n        collection: this.name\n      })\n    }, res => res.body);\n  }\n\n  replaceByExample(example, newValue, opts) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/replace-by-example\",\n      body: Object.assign({}, opts, {\n        example,\n        newValue,\n        collection: this.name\n      })\n    }, res => res.body);\n  }\n\n  updateByExample(example, newValue, opts) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/update-by-example\",\n      body: Object.assign({}, opts, {\n        example,\n        newValue,\n        collection: this.name\n      })\n    }, res => res.body);\n  }\n\n  lookupByKeys(keys) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/lookup-by-keys\",\n      body: {\n        keys,\n        collection: this.name\n      }\n    }, res => res.body.documents);\n  }\n\n  removeByKeys(keys, options) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/remove-by-keys\",\n      body: {\n        options,\n        keys,\n        collection: this.name\n      }\n    }, res => res.body);\n  }\n\n  import(data, _a = {}) {\n    var {\n      type = \"auto\"\n    } = _a,\n        opts = __rest(_a, [\"type\"]);\n\n    if (Array.isArray(data)) {\n      data = data.map(line => JSON.stringify(line)).join(\"\\r\\n\") + \"\\r\\n\";\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/import\",\n      body: data,\n      isBinary: true,\n      qs: Object.assign({\n        type: type === null ? undefined : type\n      }, opts, {\n        collection: this.name\n      })\n    }, res => res.body);\n  }\n\n  indexes() {\n    return this._connection.request({\n      path: \"/_api/index\",\n      qs: {\n        collection: this.name\n      }\n    }, res => res.body.indexes);\n  }\n\n  index(indexHandle) {\n    return this._connection.request({\n      path: `/_api/index/${this._indexHandle(indexHandle)}`\n    }, res => res.body);\n  }\n\n  ensureIndex(details) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/index\",\n      body: details,\n      qs: {\n        collection: this.name\n      }\n    }, res => res.body);\n  }\n  /** @deprecated use ensureIndex instead */\n\n\n  createIndex(details) {\n    return this.ensureIndex(details);\n  }\n\n  dropIndex(indexHandle) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/index/${this._indexHandle(indexHandle)}`\n    }, res => res.body);\n  }\n\n  createCapConstraint(opts) {\n    if (typeof opts === \"number\") {\n      opts = {\n        size: opts\n      };\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/index\",\n      body: Object.assign({}, opts, {\n        type: \"cap\"\n      }),\n      qs: {\n        collection: this.name\n      }\n    }, res => res.body);\n  }\n\n  createHashIndex(fields, opts) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n\n    if (typeof opts === \"boolean\") {\n      opts = {\n        unique: opts\n      };\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/index\",\n      body: Object.assign({\n        unique: false\n      }, opts, {\n        type: \"hash\",\n        fields: fields\n      }),\n      qs: {\n        collection: this.name\n      }\n    }, res => res.body);\n  }\n\n  createSkipList(fields, opts) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n\n    if (typeof opts === \"boolean\") {\n      opts = {\n        unique: opts\n      };\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/index\",\n      body: Object.assign({\n        unique: false\n      }, opts, {\n        type: \"skiplist\",\n        fields: fields\n      }),\n      qs: {\n        collection: this.name\n      }\n    }, res => res.body);\n  }\n\n  createPersistentIndex(fields, opts) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n\n    if (typeof opts === \"boolean\") {\n      opts = {\n        unique: opts\n      };\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/index\",\n      body: Object.assign({\n        unique: false\n      }, opts, {\n        type: \"persistent\",\n        fields: fields\n      }),\n      qs: {\n        collection: this.name\n      }\n    }, res => res.body);\n  }\n\n  createGeoIndex(fields, opts) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/index\",\n      body: Object.assign({}, opts, {\n        fields,\n        type: \"geo\"\n      }),\n      qs: {\n        collection: this.name\n      }\n    }, res => res.body);\n  }\n\n  createFulltextIndex(fields, minLength) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/index\",\n      body: {\n        fields,\n        minLength,\n        type: \"fulltext\"\n      },\n      qs: {\n        collection: this.name\n      }\n    }, res => res.body);\n  }\n\n  fulltext(attribute, query, opts = {}) {\n    if (opts.index) opts.index = this._indexHandle(opts.index);\n    return this._connection.request({\n      method: \"PUT\",\n      path: \"/_api/simple/fulltext\",\n      body: Object.assign({}, opts, {\n        attribute,\n        query,\n        collection: this.name\n      })\n    }, res => new cursor_1.ArrayCursor(this._connection, res.body, res.arangojsHostId));\n  }\n\n}\n\nexports.BaseCollection = BaseCollection;\n\nclass DocumentCollection extends BaseCollection {\n  constructor(connection, name) {\n    super(connection, name);\n    this.type = CollectionType.DOCUMENT_COLLECTION;\n  }\n\n  save(data, opts) {\n    if (typeof opts === \"boolean\") {\n      opts = {\n        returnNew: opts\n      };\n    }\n\n    if (this._connection.arangoMajor <= 2) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/_api/document\",\n        body: data,\n        qs: Object.assign({}, opts, {\n          collection: this.name\n        })\n      }, res => res.body);\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: `/_api/document/${this.name}`,\n      body: data,\n      qs: opts\n    }, res => res.body);\n  }\n\n}\n\nexports.DocumentCollection = DocumentCollection;\n\nclass EdgeCollection extends BaseCollection {\n  constructor(connection, name) {\n    super(connection, name);\n    this.type = CollectionType.EDGE_COLLECTION;\n  }\n\n  _documentPath(documentHandle) {\n    if (this._connection.arangoMajor < 3) {\n      return `edge/${this._documentHandle(documentHandle)}`;\n    }\n\n    return `document/${this._documentHandle(documentHandle)}`;\n  }\n\n  edge(documentHandle, opts = {}) {\n    if (typeof opts === \"boolean\") {\n      opts = {\n        graceful: opts\n      };\n    }\n\n    return this.document(documentHandle, opts);\n  }\n\n  save(data, fromIdOrOpts, toId, opts) {\n    if (toId !== undefined) {\n      const fromId = this._documentHandle(fromIdOrOpts);\n\n      toId = this._documentHandle(toId);\n\n      if (Array.isArray(data)) {\n        data = data.map(data => Object.assign(data, {\n          _from: fromId,\n          _to: toId\n        }));\n      } else {\n        data = Object.assign(data, {\n          _from: fromId,\n          _to: toId\n        });\n      }\n    } else {\n      if (fromIdOrOpts !== undefined) {\n        opts = fromIdOrOpts;\n      }\n    }\n\n    if (typeof opts === \"boolean\") {\n      opts = {\n        returnNew: opts\n      };\n    }\n\n    if (this._connection.arangoMajor <= 2) {\n      if (Array.isArray(data)) {\n        throw new Error(\"ArangoDB 2 does not support batch operations\");\n      }\n\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/_api/edge\",\n        body: data,\n        qs: Object.assign({}, opts, {\n          collection: this.name,\n          from: data._from,\n          to: data._to\n        })\n      }, res => res.body);\n    }\n\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/document\",\n      body: data,\n      qs: Object.assign({}, opts, {\n        collection: this.name\n      })\n    }, res => res.body);\n  }\n\n  _edges(documentHandle, direction) {\n    return this._connection.request({\n      path: `/_api/edges/${this.name}`,\n      qs: {\n        direction,\n        vertex: this._documentHandle(documentHandle)\n      }\n    }, res => res.body.edges);\n  }\n\n  edges(vertex) {\n    return this._edges(vertex);\n  }\n\n  inEdges(vertex) {\n    return this._edges(vertex, \"in\");\n  }\n\n  outEdges(vertex) {\n    return this._edges(vertex, \"out\");\n  }\n\n  traversal(startVertex, opts) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/traversal\",\n      body: Object.assign({}, opts, {\n        startVertex,\n        edgeCollection: this.name\n      })\n    }, res => res.body.result);\n  }\n\n}\n\nexports.EdgeCollection = EdgeCollection;\n\nfunction constructCollection(connection, data) {\n  const Collection = data.type === CollectionType.EDGE_COLLECTION ? EdgeCollection : DocumentCollection;\n  return new Collection(connection, data.name);\n}\n\nexports.constructCollection = constructCollection;","map":{"version":3,"sources":["../../src/collection.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection, RequestOptions } from \"./connection\";\nimport { ArrayCursor } from \"./cursor\";\nimport { isArangoError } from \"./error\";\nimport {\n  CollectionChecksum,\n  CollectionFigures,\n  CollectionProperties,\n  CollectionPropertiesOptions,\n  CreateCollectionOptions,\n  CreateCollectionQueryOptions,\n  Document,\n  DocumentData,\n  Edge,\n  InsertOptions,\n  RemoveByExampleOptions,\n  RemoveOptions,\n  ReplaceOptions,\n  UpdateByExampleOptions,\n  UpdateOptions\n} from \"./util/types\";\n\nexport enum CollectionType {\n  DOCUMENT_COLLECTION = 2,\n  EDGE_COLLECTION = 3\n}\n\nexport type DocumentHandle =\n  | string\n  | {\n      _key?: string;\n      _id?: string;\n    };\n\nexport type IndexHandle =\n  | string\n  | {\n      id?: string;\n    };\n\nexport interface ImportOptions {\n  type?: null | \"auto\" | \"documents\" | \"array\";\n  fromPrefix?: string;\n  toPrefix?: string;\n  overwrite?: boolean;\n  waitForSync?: boolean;\n  onDuplicate?: \"error\" | \"update\" | \"replace\" | \"ignore\";\n  complete?: boolean;\n  details?: boolean;\n}\n\nexport interface ImportResult {\n  error: false;\n  created: number;\n  errors: number;\n  empty: number;\n  updated: number;\n  ignored: number;\n  details?: string[];\n}\n\nexport interface DocumentReadOptions {\n  graceful?: boolean;\n  allowDirtyRead?: boolean;\n}\n\nexport function isArangoCollection(\n  collection: any\n): collection is ArangoCollection {\n  return Boolean(collection && collection.isArangoCollection);\n}\n\nexport interface ArangoCollection {\n  isArangoCollection: true;\n  name: string;\n}\n\nexport const DOCUMENT_NOT_FOUND = 1202;\nexport const COLLECTION_NOT_FOUND = 1203;\n\nexport abstract class BaseCollection<T extends object = any>\n  implements ArangoCollection {\n  isArangoCollection: true = true;\n  name: string;\n  abstract type: CollectionType;\n  protected _idPrefix: string;\n  protected _connection: Connection;\n\n  constructor(connection: Connection, name: string) {\n    this.name = name;\n    this._idPrefix = `${this.name}/`;\n    this._connection = connection;\n    if (this._connection.arangoMajor >= 3) {\n      this.first = undefined!;\n      this.last = undefined!;\n      this.createCapConstraint = undefined!;\n    }\n  }\n\n  protected _documentPath(documentHandle: DocumentHandle) {\n    return `/document/${this._documentHandle(documentHandle)}`;\n  }\n\n  protected _documentHandle(documentHandle: DocumentHandle) {\n    if (typeof documentHandle !== \"string\") {\n      if (documentHandle._id) {\n        return documentHandle._id;\n      }\n      if (documentHandle._key) {\n        return this._idPrefix + documentHandle._key;\n      }\n      throw new Error(\"Document handle must be a document or string\");\n    }\n    if (documentHandle.indexOf(\"/\") === -1) {\n      return this._idPrefix + documentHandle;\n    }\n    return documentHandle;\n  }\n\n  protected _indexHandle(indexHandle: IndexHandle) {\n    if (typeof indexHandle !== \"string\") {\n      if (indexHandle.id) {\n        return indexHandle.id;\n      }\n      throw new Error(\"Index handle must be a index or string\");\n    }\n    if (indexHandle.indexOf(\"/\") === -1) {\n      return this._idPrefix + indexHandle;\n    }\n    return indexHandle;\n  }\n\n  protected _get(path: string, qs?: any) {\n    return this._connection.request(\n      { path: `/_api/collection/${this.name}/${path}`, qs },\n      res => res.body\n    );\n  }\n\n  protected _put(path: string, body: any) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/collection/${this.name}/${path}`,\n        body\n      },\n      res => res.body\n    );\n  }\n\n  get() {\n    return this._connection.request(\n      { path: `/_api/collection/${this.name}` },\n      res => res.body\n    );\n  }\n\n  exists(): Promise<boolean> {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === COLLECTION_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  create(properties?: CreateCollectionOptions & CreateCollectionQueryOptions) {\n    const {\n      waitForSyncReplication = undefined,\n      enforceReplicationFactor = undefined,\n      ...options\n    } = properties || {};\n    const qs: RequestOptions[\"qs\"] = {};\n    if (typeof waitForSyncReplication === \"boolean\") {\n      qs.waitForSyncReplication = waitForSyncReplication ? 1 : 0;\n    }\n    if (typeof enforceReplicationFactor === \"boolean\") {\n      qs.enforceReplicationFactor = enforceReplicationFactor ? 1 : 0;\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/collection\",\n        qs,\n        body: {\n          ...options,\n          name: this.name,\n          type: this.type\n        }\n      },\n      res => res.body\n    );\n  }\n\n  properties(): Promise<CollectionProperties> {\n    return this._get(\"properties\");\n  }\n\n  count() {\n    return this._get(\"count\");\n  }\n\n  figures(): Promise<CollectionFigures> {\n    return this._get(\"figures\");\n  }\n\n  revision() {\n    return this._get(\"revision\");\n  }\n\n  checksum(opts?: any): Promise<CollectionChecksum> {\n    return this._get(\"checksum\", opts);\n  }\n\n  load(count?: boolean) {\n    return this._put(\n      \"load\",\n      typeof count === \"boolean\" ? { count: count } : undefined\n    );\n  }\n\n  unload() {\n    return this._put(\"unload\", undefined);\n  }\n\n  setProperties(properties: CollectionPropertiesOptions) {\n    return this._put(\"properties\", properties);\n  }\n\n  async rename(name: string) {\n    const result = await this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/collection/${this.name}/rename`,\n        body: { name }\n      },\n      res => res.body\n    );\n    this.name = name;\n    this._idPrefix = `${name}/`;\n    return result;\n  }\n\n  rotate() {\n    return this._put(\"rotate\", undefined);\n  }\n\n  truncate() {\n    return this._put(\"truncate\", undefined);\n  }\n\n  drop(opts?: any) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/collection/${this.name}`,\n        qs: opts\n      },\n      res => res.body\n    );\n  }\n\n  getResponsibleShard(document: Object): Promise<string> {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/collection/${this.name}/responsibleShard`,\n        body: document\n      },\n      res => res.body.shardId\n    );\n  }\n\n  documentExists(documentHandle: DocumentHandle): Promise<boolean> {\n    return this._connection\n      .request(\n        {\n          method: \"HEAD\",\n          path: `/_api/${this._documentPath(documentHandle)}`\n        },\n        () => true\n      )\n      .catch(err => {\n        if (err.statusCode === 404) {\n          return false;\n        }\n        throw err;\n      });\n  }\n\n  document(\n    documentHandle: DocumentHandle,\n    graceful: boolean\n  ): Promise<Document<T>>;\n  document(\n    documentHandle: DocumentHandle,\n    opts?: DocumentReadOptions\n  ): Promise<Document<T>>;\n  document(\n    documentHandle: DocumentHandle,\n    opts: boolean | DocumentReadOptions = {}\n  ): Promise<Document<T>> {\n    if (typeof opts === \"boolean\") {\n      opts = { graceful: opts };\n    }\n    const { allowDirtyRead = undefined, graceful = false } = opts;\n    const result = this._connection.request(\n      { path: `/_api/${this._documentPath(documentHandle)}`, allowDirtyRead },\n      res => res.body\n    );\n    if (!graceful) return result;\n    return result.catch(err => {\n      if (isArangoError(err) && err.errorNum === DOCUMENT_NOT_FOUND) {\n        return null;\n      }\n      throw err;\n    });\n  }\n\n  replace(\n    documentHandle: DocumentHandle,\n    newValue: Object | Array<Object>,\n    opts: ReplaceOptions = {}\n  ) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev && this._connection.arangoMajor >= 3) {\n      let rev: string | undefined;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev!;\n    }\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/${this._documentPath(documentHandle)}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body\n    );\n  }\n\n  update(\n    documentHandle: DocumentHandle,\n    newValue: Object | Array<Object>,\n    opts: UpdateOptions = {}\n  ) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev && this._connection.arangoMajor >= 3) {\n      let rev: string | undefined;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev!;\n    }\n    return this._connection.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/${this._documentPath(documentHandle)}`,\n        body: newValue,\n        qs: opts,\n        headers\n      },\n      res => res.body\n    );\n  }\n\n  bulkUpdate(newValues: Object | Array<Object>, opts?: any) {\n    return this._connection.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/document/${this.name}`,\n        body: newValues,\n        qs: opts\n      },\n      res => res.body\n    );\n  }\n\n  remove(documentHandle: DocumentHandle, opts: RemoveOptions = {}) {\n    const headers: { [key: string]: string } = {};\n    if (typeof opts === \"string\") {\n      opts = { rev: opts };\n    }\n    if (opts.rev && this._connection.arangoMajor >= 3) {\n      let rev: string | undefined;\n      ({ rev, ...opts } = opts);\n      headers[\"if-match\"] = rev!;\n    }\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/${this._documentPath(documentHandle)}`,\n        qs: opts,\n        headers\n      },\n      res => res.body\n    );\n  }\n\n  list(type: string = \"id\") {\n    if (this._connection.arangoMajor <= 2) {\n      return this._connection.request(\n        {\n          path: \"/_api/document\",\n          qs: { type, collection: this.name }\n        },\n        res => res.body.documents\n      );\n    }\n\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/all-keys\",\n        body: { type, collection: this.name }\n      },\n      res => res.body.result\n    );\n  }\n\n  all(opts?: any) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/all\",\n        body: {\n          ...opts,\n          collection: this.name\n        }\n      },\n      res => new ArrayCursor(this._connection, res.body, res.arangojsHostId)\n    );\n  }\n\n  any() {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/any\",\n        body: { collection: this.name }\n      },\n      res => res.body.document\n    );\n  }\n\n  first(opts?: any) {\n    if (typeof opts === \"number\") {\n      opts = { count: opts };\n    }\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/first\",\n        body: {\n          ...opts,\n          collection: this.name\n        }\n      },\n      res => res.body.result\n    );\n  }\n\n  last(opts?: any) {\n    if (typeof opts === \"number\") {\n      opts = { count: opts };\n    }\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/last\",\n        body: {\n          ...opts,\n          collection: this.name\n        }\n      },\n      res => res.body.result\n    );\n  }\n\n  byExample(example: any, opts?: any) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/by-example\",\n        body: {\n          ...opts,\n          example,\n          collection: this.name\n        }\n      },\n      res => new ArrayCursor(this._connection, res.body, res.arangojsHostId)\n    );\n  }\n\n  firstExample(example: any) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/first-example\",\n        body: {\n          example,\n          collection: this.name\n        }\n      },\n      res => res.body.document\n    );\n  }\n\n  removeByExample(example: any, opts?: RemoveByExampleOptions) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/remove-by-example\",\n        body: {\n          ...opts,\n          example,\n          collection: this.name\n        }\n      },\n      res => res.body\n    );\n  }\n\n  replaceByExample(\n    example: any,\n    newValue: any,\n    opts?: { waitForSync?: boolean; limit?: number }\n  ) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/replace-by-example\",\n        body: {\n          ...opts,\n          example,\n          newValue,\n          collection: this.name\n        }\n      },\n      res => res.body\n    );\n  }\n\n  updateByExample(example: any, newValue: any, opts?: UpdateByExampleOptions) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/update-by-example\",\n        body: {\n          ...opts,\n          example,\n          newValue,\n          collection: this.name\n        }\n      },\n      res => res.body\n    );\n  }\n\n  lookupByKeys(keys: string[]) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/lookup-by-keys\",\n        body: {\n          keys,\n          collection: this.name\n        }\n      },\n      res => res.body.documents\n    );\n  }\n\n  removeByKeys(keys: string[], options: any) {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/remove-by-keys\",\n        body: {\n          options,\n          keys,\n          collection: this.name\n        }\n      },\n      res => res.body\n    );\n  }\n\n  import(\n    data: Buffer | Blob | string | any[],\n    { type = \"auto\", ...opts }: ImportOptions = {}\n  ): Promise<ImportResult> {\n    if (Array.isArray(data)) {\n      data = data.map(line => JSON.stringify(line)).join(\"\\r\\n\") + \"\\r\\n\";\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/import\",\n        body: data,\n        isBinary: true,\n        qs: {\n          type: type === null ? undefined : type,\n          ...opts,\n          collection: this.name\n        }\n      },\n      res => res.body\n    );\n  }\n\n  indexes() {\n    return this._connection.request(\n      {\n        path: \"/_api/index\",\n        qs: { collection: this.name }\n      },\n      res => res.body.indexes\n    );\n  }\n\n  index(indexHandle: IndexHandle) {\n    return this._connection.request(\n      { path: `/_api/index/${this._indexHandle(indexHandle)}` },\n      res => res.body\n    );\n  }\n\n  ensureIndex(details: any) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/index\",\n        body: details,\n        qs: { collection: this.name }\n      },\n      res => res.body\n    );\n  }\n\n  /** @deprecated use ensureIndex instead */\n  createIndex(details: any) {\n    return this.ensureIndex(details);\n  }\n\n  dropIndex(indexHandle: IndexHandle) {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/index/${this._indexHandle(indexHandle)}`\n      },\n      res => res.body\n    );\n  }\n\n  createCapConstraint(opts?: any) {\n    if (typeof opts === \"number\") {\n      opts = { size: opts };\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/index\",\n        body: { ...opts, type: \"cap\" },\n        qs: { collection: this.name }\n      },\n      res => res.body\n    );\n  }\n\n  createHashIndex(fields: string[] | string, opts?: any) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n    if (typeof opts === \"boolean\") {\n      opts = { unique: opts };\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/index\",\n        body: { unique: false, ...opts, type: \"hash\", fields: fields },\n        qs: { collection: this.name }\n      },\n      res => res.body\n    );\n  }\n\n  createSkipList(fields: string[] | string, opts?: any) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n    if (typeof opts === \"boolean\") {\n      opts = { unique: opts };\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/index\",\n        body: { unique: false, ...opts, type: \"skiplist\", fields: fields },\n        qs: { collection: this.name }\n      },\n      res => res.body\n    );\n  }\n\n  createPersistentIndex(fields: string[] | string, opts?: any) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n    if (typeof opts === \"boolean\") {\n      opts = { unique: opts };\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/index\",\n        body: { unique: false, ...opts, type: \"persistent\", fields: fields },\n        qs: { collection: this.name }\n      },\n      res => res.body\n    );\n  }\n\n  createGeoIndex(fields: string[] | string, opts?: any) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/index\",\n        body: { ...opts, fields, type: \"geo\" },\n        qs: { collection: this.name }\n      },\n      res => res.body\n    );\n  }\n\n  createFulltextIndex(fields: string[] | string, minLength?: number) {\n    if (typeof fields === \"string\") {\n      fields = [fields];\n    }\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/index\",\n        body: { fields, minLength, type: \"fulltext\" },\n        qs: { collection: this.name }\n      },\n      res => res.body\n    );\n  }\n\n  fulltext(attribute: any, query: any, opts: any = {}) {\n    if (opts.index) opts.index = this._indexHandle(opts.index);\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: \"/_api/simple/fulltext\",\n        body: {\n          ...opts,\n          attribute,\n          query,\n          collection: this.name\n        }\n      },\n      res => new ArrayCursor(this._connection, res.body, res.arangojsHostId)\n    );\n  }\n}\n\nexport class DocumentCollection<T extends object = any> extends BaseCollection<\n  T\n> {\n  type = CollectionType.DOCUMENT_COLLECTION;\n  constructor(connection: Connection, name: string) {\n    super(connection, name);\n  }\n\n  save(\n    data: DocumentData<T> | Array<DocumentData<T>>,\n    opts?: InsertOptions | boolean\n  ) {\n    if (typeof opts === \"boolean\") {\n      opts = { returnNew: opts };\n    }\n\n    if (this._connection.arangoMajor <= 2) {\n      return this._connection.request(\n        {\n          method: \"POST\",\n          path: \"/_api/document\",\n          body: data,\n          qs: {\n            ...opts,\n            collection: this.name\n          }\n        },\n        res => res.body\n      );\n    }\n\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: `/_api/document/${this.name}`,\n        body: data,\n        qs: opts\n      },\n      res => res.body\n    );\n  }\n}\n\nexport class EdgeCollection<T extends object = any> extends BaseCollection<T> {\n  type = CollectionType.EDGE_COLLECTION;\n\n  constructor(connection: Connection, name: string) {\n    super(connection, name);\n  }\n\n  protected _documentPath(documentHandle: DocumentHandle) {\n    if (this._connection.arangoMajor < 3) {\n      return `edge/${this._documentHandle(documentHandle)}`;\n    }\n    return `document/${this._documentHandle(documentHandle)}`;\n  }\n\n  edge(documentHandle: DocumentHandle, graceful: boolean): Promise<Edge<T>>;\n  edge(\n    documentHandle: DocumentHandle,\n    opts?: DocumentReadOptions\n  ): Promise<Edge<T>>;\n  edge(\n    documentHandle: DocumentHandle,\n    opts: boolean | DocumentReadOptions = {}\n  ): Promise<Edge<T>> {\n    if (typeof opts === \"boolean\") {\n      opts = { graceful: opts };\n    }\n    return this.document(documentHandle, opts) as Promise<Edge<T>>;\n  }\n\n  save(data: T | Array<T>, opts?: InsertOptions | boolean): Promise<any>;\n  save(\n    data: T | Array<T>,\n    fromId: DocumentHandle,\n    toId: DocumentHandle,\n    opts?: InsertOptions | boolean\n  ): Promise<any>;\n  save(\n    data: T | Array<T>,\n    fromIdOrOpts?: DocumentHandle | InsertOptions | boolean,\n    toId?: DocumentHandle,\n    opts?: InsertOptions | boolean\n  ) {\n    if (toId !== undefined) {\n      const fromId = this._documentHandle(fromIdOrOpts as DocumentHandle);\n      toId = this._documentHandle(toId);\n      if (Array.isArray(data)) {\n        data = data.map(data =>\n          Object.assign(data, { _from: fromId, _to: toId })\n        );\n      } else {\n        data = Object.assign(data, { _from: fromId, _to: toId });\n      }\n    } else {\n      if (fromIdOrOpts !== undefined) {\n        opts = fromIdOrOpts as InsertOptions | boolean;\n      }\n    }\n    if (typeof opts === \"boolean\") {\n      opts = { returnNew: opts };\n    }\n    if (this._connection.arangoMajor <= 2) {\n      if (Array.isArray(data)) {\n        throw new Error(\"ArangoDB 2 does not support batch operations\");\n      }\n      return this._connection.request(\n        {\n          method: \"POST\",\n          path: \"/_api/edge\",\n          body: data,\n          qs: {\n            ...opts,\n            collection: this.name,\n            from: (data as any)._from,\n            to: (data as any)._to\n          }\n        },\n        res => res.body\n      );\n    }\n\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/document\",\n        body: data,\n        qs: {\n          ...opts,\n          collection: this.name\n        }\n      },\n      res => res.body\n    );\n  }\n\n  protected _edges(documentHandle: DocumentHandle, direction?: \"in\" | \"out\") {\n    return this._connection.request(\n      {\n        path: `/_api/edges/${this.name}`,\n        qs: {\n          direction,\n          vertex: this._documentHandle(documentHandle)\n        }\n      },\n      res => res.body.edges\n    );\n  }\n\n  edges(vertex: DocumentHandle) {\n    return this._edges(vertex);\n  }\n\n  inEdges(vertex: DocumentHandle) {\n    return this._edges(vertex, \"in\");\n  }\n\n  outEdges(vertex: DocumentHandle) {\n    return this._edges(vertex, \"out\");\n  }\n\n  traversal(startVertex: DocumentHandle, opts?: any) {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/traversal\",\n        body: {\n          ...opts,\n          startVertex,\n          edgeCollection: this.name\n        }\n      },\n      res => res.body.result\n    );\n  }\n}\n\nexport function constructCollection(connection: Connection, data: any) {\n  const Collection =\n    data.type === CollectionType.EDGE_COLLECTION\n      ? EdgeCollection\n      : DocumentCollection;\n  return new Collection(connection, data.name);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}