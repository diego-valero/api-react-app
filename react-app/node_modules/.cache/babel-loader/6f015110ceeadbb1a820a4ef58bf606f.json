{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst error_1 = require(\"./error\");\n\nvar ViewType;\n\n(function (ViewType) {\n  ViewType[\"ARANGOSEARCH_VIEW\"] = \"arangosearch\";\n})(ViewType = exports.ViewType || (exports.ViewType = {}));\n\nconst VIEW_NOT_FOUND = 1203;\n\nclass BaseView {\n  constructor(connection, name) {\n    this.isArangoView = true;\n    this.name = name;\n    this._connection = connection;\n  }\n\n  get() {\n    return this._connection.request({\n      path: `/_api/view/${this.name}`\n    }, res => res.body);\n  }\n\n  exists() {\n    return this.get().then(() => true, err => {\n      if (error_1.isArangoError(err) && err.errorNum === VIEW_NOT_FOUND) {\n        return false;\n      }\n\n      throw err;\n    });\n  }\n\n  rename(name) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this._connection.request({\n        method: \"PUT\",\n        path: `/_api/view/${this.name}/rename`,\n        body: {\n          name\n        }\n      }, res => res.body);\n      this.name = name;\n      return result;\n    });\n  }\n\n  drop() {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/view/${this.name}`\n    }, res => res.body);\n  }\n\n}\n\nexports.BaseView = BaseView;\n\nclass ArangoSearchView extends BaseView {\n  constructor() {\n    super(...arguments);\n    this.type = ViewType.ARANGOSEARCH_VIEW;\n  }\n\n  create(properties = {}) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/view\",\n      body: Object.assign({}, properties, {\n        name: this.name,\n        type: this.type\n      })\n    }, res => res.body);\n  }\n\n  properties() {\n    return this._connection.request({\n      path: `/_api/view/${this.name}/properties`\n    }, res => res.body);\n  }\n\n  setProperties(properties = {}) {\n    return this._connection.request({\n      method: \"PATCH\",\n      path: `/_api/view/${this.name}/properties`,\n      body: properties\n    }, res => res.body);\n  }\n\n  replaceProperties(properties = {}) {\n    return this._connection.request({\n      method: \"PUT\",\n      path: `/_api/view/${this.name}/properties`,\n      body: properties\n    }, res => res.body);\n  }\n\n}\n\nexports.ArangoSearchView = ArangoSearchView;\n\nfunction constructView(connection, data) {\n  if (data.type && data.type !== ViewType.ARANGOSEARCH_VIEW) {\n    throw new Error(`Unknown view type \"${data.type}\"`);\n  }\n\n  return new ArangoSearchView(connection, data.name);\n}\n\nexports.constructView = constructView;","map":{"version":3,"sources":["../../src/view.ts"],"names":[],"mappings":"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","sourcesContent":["import { Connection } from \"./connection\";\nimport { isArangoError } from \"./error\";\n\nexport enum ViewType {\n  ARANGOSEARCH_VIEW = \"arangosearch\"\n}\n\nexport interface ArangoView {\n  isArangoView: true;\n  name: string;\n}\n\nexport interface ArangoViewResponse {\n  name: string;\n  id: string;\n  type: ViewType;\n}\n\ninterface ArangoSearchViewCollectionLink {\n  analyzers?: string[];\n  fields?: { [key: string]: ArangoSearchViewCollectionLink | undefined };\n  includeAllFields?: boolean;\n  trackListPositions?: boolean;\n  storeValues?: \"none\" | \"id\";\n}\n\nexport interface ArangoSearchViewProperties {\n  cleanupIntervalStep: number;\n  consolidationIntervalMsec: number;\n  writebufferIdle: number;\n  writebufferActive: number;\n  writebufferSizeMax: number;\n  consolidationPolicy: {\n    type: \"bytes_accum\" | \"tier\";\n    threshold?: number;\n    segments_min?: number;\n    segments_max?: number;\n    segments_bytes_max?: number;\n    segments_bytes_floor?: number;\n    lookahead?: number;\n  };\n  links: {\n    [key: string]: ArangoSearchViewCollectionLink | undefined;\n  };\n}\n\nexport interface ArangoSearchViewPropertiesResponse\n  extends ArangoViewResponse,\n    ArangoSearchViewProperties {\n  type: ViewType.ARANGOSEARCH_VIEW;\n}\n\nexport interface ArangoSearchViewPropertiesOptions {\n  cleanupIntervalStep?: number;\n  consolidationIntervalMsec?: number;\n  commitIntervalMsec?: number;\n  writebufferIdle?: number;\n  writebufferActive?: number;\n  writebufferSizeMax?: number;\n  consolidationPolicy?:\n    | {\n        type: \"bytes_accum\";\n        threshold?: number;\n      }\n    | {\n        type: \"tier\";\n        lookahead?: number;\n        segments_min?: number;\n        segments_max?: number;\n        segments_bytes_max?: number;\n        segments_bytes_floor?: number;\n      };\n  primarySort?: (\n    | {\n        field: string;\n        direction: \"desc\" | \"asc\";\n      }\n    | {\n        field: string;\n        asc: boolean;\n      })[];\n  links?: {\n    [key: string]: ArangoSearchViewCollectionLink | undefined;\n  };\n}\n\nconst VIEW_NOT_FOUND = 1203;\nexport abstract class BaseView implements ArangoView {\n  isArangoView: true = true;\n  name: string;\n  abstract type: ViewType;\n  protected _connection: Connection;\n\n  constructor(connection: Connection, name: string) {\n    this.name = name;\n    this._connection = connection;\n  }\n\n  get(): Promise<ArangoViewResponse> {\n    return this._connection.request(\n      { path: `/_api/view/${this.name}` },\n      res => res.body\n    );\n  }\n\n  exists() {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === VIEW_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  async rename(name: string) {\n    const result = await this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/view/${this.name}/rename`,\n        body: { name }\n      },\n      res => res.body\n    );\n    this.name = name;\n    return result;\n  }\n\n  drop() {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/view/${this.name}`\n      },\n      res => res.body\n    );\n  }\n}\n\nexport class ArangoSearchView extends BaseView {\n  type = ViewType.ARANGOSEARCH_VIEW;\n\n  create(\n    properties: ArangoSearchViewPropertiesOptions = {}\n  ): Promise<ArangoSearchViewPropertiesResponse> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/view\",\n        body: {\n          ...properties,\n          name: this.name,\n          type: this.type\n        }\n      },\n      res => res.body\n    );\n  }\n\n  properties(): Promise<ArangoSearchViewPropertiesResponse> {\n    return this._connection.request(\n      { path: `/_api/view/${this.name}/properties` },\n      res => res.body\n    );\n  }\n\n  setProperties(\n    properties: ArangoSearchViewPropertiesOptions = {}\n  ): Promise<ArangoSearchViewPropertiesResponse> {\n    return this._connection.request(\n      {\n        method: \"PATCH\",\n        path: `/_api/view/${this.name}/properties`,\n        body: properties\n      },\n      res => res.body\n    );\n  }\n\n  replaceProperties(\n    properties: ArangoSearchViewPropertiesOptions = {}\n  ): Promise<ArangoSearchViewPropertiesResponse> {\n    return this._connection.request(\n      {\n        method: \"PUT\",\n        path: `/_api/view/${this.name}/properties`,\n        body: properties\n      },\n      res => res.body\n    );\n  }\n}\n\nexport function constructView(connection: Connection, data: any): ArangoView {\n  if (data.type && data.type !== ViewType.ARANGOSEARCH_VIEW) {\n    throw new Error(`Unknown view type \"${data.type}\"`);\n  }\n  return new ArangoSearchView(connection, data.name);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}