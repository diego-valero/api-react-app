{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst error_1 = require(\"./error\");\n\nconst ANALYZER_NOT_FOUND = 1202;\n\nclass ArangoAnalyzer {\n  constructor(connection, name) {\n    this.isArangoAnalyzer = true;\n    this._connection = connection;\n    this.name = name;\n  }\n\n  get() {\n    return this._connection.request({\n      path: `/_api/analyzer/${this.name}`\n    }, res => res.body);\n  }\n\n  exists() {\n    return this.get().then(() => true, err => {\n      if (error_1.isArangoError(err) && err.errorNum === ANALYZER_NOT_FOUND) {\n        return false;\n      }\n\n      throw err;\n    });\n  }\n\n  create(options) {\n    return this._connection.request({\n      method: \"POST\",\n      path: \"/_api/analyzer\",\n      body: Object.assign({\n        name: this.name\n      }, options)\n    }, res => res.body);\n  }\n\n  drop(force) {\n    return this._connection.request({\n      method: \"DELETE\",\n      path: `/_api/analyzer/${this.name}`,\n      qs: {\n        force\n      }\n    }, res => res.body);\n  }\n\n}\n\nexports.ArangoAnalyzer = ArangoAnalyzer;","map":{"version":3,"sources":["../../src/analyzer.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAgEA,MAAM,kBAAkB,GAAG,IAA3B;;AACA,MAAa,cAAb,CAA2B;AAMzB,EAAA,WAAA,CAAY,UAAZ,EAAoC,IAApC,EAAgD;AAHhD,SAAA,gBAAA,GAAmB,IAAnB;AAIE,SAAK,WAAL,GAAmB,UAAnB;AACA,SAAK,IAAL,GAAY,IAAZ;AACD;;AAED,EAAA,GAAG,GAAA;AACD,WAAO,KAAK,WAAL,CAAiB,OAAjB,CACL;AAAE,MAAA,IAAI,EAAE,kBAAkB,KAAK,IAAI;AAAnC,KADK,EAEL,GAAG,IAAI,GAAG,CAAC,IAFN,CAAP;AAID;;AAED,EAAA,MAAM,GAAA;AACJ,WAAO,KAAK,GAAL,GAAW,IAAX,CACL,MAAM,IADD,EAEL,GAAG,IAAG;AACJ,UAAI,OAAA,CAAA,aAAA,CAAc,GAAd,KAAsB,GAAG,CAAC,QAAJ,KAAiB,kBAA3C,EAA+D;AAC7D,eAAO,KAAP;AACD;;AACD,YAAM,GAAN;AACD,KAPI,CAAP;AASD;;AAED,EAAA,MAAM,CAAC,OAAD,EAA+B;AACnC,WAAO,KAAK,WAAL,CAAiB,OAAjB,CACL;AACE,MAAA,MAAM,EAAE,MADV;AAEE,MAAA,IAAI,EAAE,gBAFR;AAGE,MAAA,IAAI,EAAA,MAAA,CAAA,MAAA,CAAA;AAAI,QAAA,IAAI,EAAE,KAAK;AAAf,OAAA,EAAwB,OAAxB;AAHN,KADK,EAML,GAAG,IAAI,GAAG,CAAC,IANN,CAAP;AAQD;;AAED,EAAA,IAAI,CAAC,KAAD,EAAgB;AAClB,WAAO,KAAK,WAAL,CAAiB,OAAjB,CACL;AACE,MAAA,MAAM,EAAE,QADV;AAEE,MAAA,IAAI,EAAE,kBAAkB,KAAK,IAAI,EAFnC;AAGE,MAAA,EAAE,EAAE;AAAE,QAAA;AAAF;AAHN,KADK,EAML,GAAG,IAAI,GAAG,CAAC,IANN,CAAP;AAQD;;AAlDwB;;AAA3B,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["import { Connection } from \"./connection\";\nimport { isArangoError } from \"./error\";\n\nexport type AnalyzerDescription = AnyAnalyzer & {\n  name: string;\n  features: string[];\n};\n\nexport type CreateAnalyzerOptions = AnyAnalyzer & {\n  features?: string[];\n};\n\nexport type AnyAnalyzer =\n  | IdentityAnalyzer\n  | DelimiterAnalyzer\n  | StemAnalyzer\n  | NormAnalyzer\n  | NgramAnalyzer\n  | TextAnalyzer;\n\nexport interface IdentityAnalyzer {\n  type: \"identity\";\n  properties?: null;\n}\n\nexport interface DelimiterAnalyzer {\n  type: \"delimiter\";\n  properties: string | { delimiter: string };\n}\n\nexport interface StemAnalyzer {\n  type: \"stem\";\n  properties: { locale: string };\n}\n\nexport interface NormAnalyzer {\n  type: \"norm\";\n  properties: {\n    locale: string;\n    case?: \"lower\" | \"none\" | \"upper\";\n    accent?: boolean;\n  };\n}\n\nexport interface NgramAnalyzer {\n  type: \"ngram\";\n  properties: {\n    max: number;\n    min: number;\n    preserveOriginal: boolean;\n  };\n}\n\nexport interface TextAnalyzer {\n  type: \"text\";\n  properties: {\n    locale: string;\n    case?: \"lower\" | \"none\" | \"upper\";\n    stopwords?: string[];\n    stopwordsPath?: string;\n    accent?: boolean;\n    stemming?: boolean;\n  };\n}\n\nconst ANALYZER_NOT_FOUND = 1202;\nexport class ArangoAnalyzer {\n  private _connection: Connection;\n\n  isArangoAnalyzer = true;\n  name: string;\n\n  constructor(connection: Connection, name: string) {\n    this._connection = connection;\n    this.name = name;\n  }\n\n  get(): Promise<AnalyzerDescription> {\n    return this._connection.request(\n      { path: `/_api/analyzer/${this.name}` },\n      res => res.body\n    );\n  }\n\n  exists() {\n    return this.get().then(\n      () => true,\n      err => {\n        if (isArangoError(err) && err.errorNum === ANALYZER_NOT_FOUND) {\n          return false;\n        }\n        throw err;\n      }\n    );\n  }\n\n  create(options: CreateAnalyzerOptions): Promise<AnalyzerDescription> {\n    return this._connection.request(\n      {\n        method: \"POST\",\n        path: \"/_api/analyzer\",\n        body: { name: this.name, ...options }\n      },\n      res => res.body\n    );\n  }\n\n  drop(force?: boolean): Promise<{ name: string }> {\n    return this._connection.request(\n      {\n        method: \"DELETE\",\n        path: `/_api/analyzer/${this.name}`,\n        qs: { force }\n      },\n      res => res.body\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}